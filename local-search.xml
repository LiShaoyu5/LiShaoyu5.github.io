<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[TF2]3. Keras Model Training</title>
    <link href="/2020/3-TF3-Keras-Model-Training/"/>
    <url>/2020/3-TF3-Keras-Model-Training/</url>
    
    <content type="html"><![CDATA[<p>这部分包括了使用 <code>tf.keras</code> 构建、训练模型的基本方法。</p><div class="hljs"><pre><code class="hljs vim">import tensorflow <span class="hljs-keyword">as</span> <span class="hljs-keyword">tf</span><span class="hljs-keyword">print</span>(<span class="hljs-keyword">tf</span>.__version__)</code></pre></div><h1 id="1-基本模型训练流程"><a href="#1-基本模型训练流程" class="headerlink" title="1. 基本模型训练流程"></a>1. 基本模型训练流程</h1><p>模型训练的一般步骤包括：</p><ul><li>构建模型（三种方式）</li><li>训练模型：model.fit()</li><li>验证模型：model.evaluate()</li><li>使用模型进行预测：model.predict()</li></ul><h2 id="1-1-构建模型"><a href="#1-1-构建模型" class="headerlink" title="1.1 构建模型"></a>1.1 构建模型</h2><div class="hljs"><pre><code class="hljs reasonml">from tensorflow.keras import layers<span class="hljs-keyword">class</span> <span class="hljs-constructor">MyModel(<span class="hljs-params">tf</span>.<span class="hljs-params">keras</span>.Model)</span>:    def <span class="hljs-constructor">__init__(<span class="hljs-params">self</span>, <span class="hljs-params">num_classes</span>=10)</span>:        super(MyModel, self).<span class="hljs-constructor">__init__()</span>        self.num_classes = num_classes        self.Dense1 = layers.<span class="hljs-constructor">Dense(64, <span class="hljs-params">activation</span>='<span class="hljs-params">relu</span>', <span class="hljs-params">input_shape</span>=(32,)</span>)  # 输入维度<span class="hljs-number">32</span>        self.Dense2 = layers.<span class="hljs-constructor">Dense(64, <span class="hljs-params">activation</span>='<span class="hljs-params">relu</span>')</span>        self.Dense3 = layers.<span class="hljs-constructor">Dense(10)</span>  # 输出为<span class="hljs-number">10</span>类    def call(self, x):        x = self.<span class="hljs-constructor">Dense1(<span class="hljs-params">x</span>)</span>        x = self.<span class="hljs-constructor">Dense2(<span class="hljs-params">x</span>)</span>        x = self.<span class="hljs-constructor">Dense3(<span class="hljs-params">x</span>)</span>        return xmodel = <span class="hljs-constructor">MyModel(<span class="hljs-params">num_classes</span>=10)</span>model.compile(    optimizer=tf.keras.optimizers.<span class="hljs-constructor">Adam(0.001)</span>,    loss=tf.keras.losses.<span class="hljs-constructor">SparseCategoricalCrossentropy(<span class="hljs-params">from_logits</span>=True)</span>,    metrics=<span class="hljs-literal">['<span class="hljs-identifier">accuracy</span>']</span>)</code></pre></div><div class="hljs"><pre><code class="hljs angelscript"># 构建数据集<span class="hljs-keyword">import</span> numpy as npx_train = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))  # <span class="hljs-number">32</span>个特征，<span class="hljs-number">1000</span>个样本y_train = np.random.randint(<span class="hljs-number">10</span>, size=(<span class="hljs-number">1000</span>, ))  # <span class="hljs-number">10</span>个分类x_val = np.random.random((<span class="hljs-number">200</span>, <span class="hljs-number">32</span>))y_val = np.random.randint(<span class="hljs-number">10</span>, size=(<span class="hljs-number">200</span>, ))x_test = np.random.random((<span class="hljs-number">200</span>, <span class="hljs-number">32</span>))y_test = np.random.randint(<span class="hljs-number">10</span>, size=(<span class="hljs-number">200</span>, ))</code></pre></div><h2 id="1-2-训练模型"><a href="#1-2-训练模型" class="headerlink" title="1.2 训练模型"></a>1.2 训练模型</h2><p>model.fit()中的基本参数：</p><ul><li>x、y：输入数据和目标数据。</li><li>batch_size：样本分组的大小，即每训练batch_size个样本，模型更新一次权重参数。</li><li>epochs：训练的轮数。</li></ul><p>这里还使用了验证集：<br><div class="hljs"><pre><code class="hljs routeros">model.fit(x_train, y_train, <span class="hljs-attribute">batch_size</span>=100, <span class="hljs-attribute">epochs</span>=5, validation_data=(x_val, y_val))</code></pre></div></p><h2 id="1-3-模型验证和预测"><a href="#1-3-模型验证和预测" class="headerlink" title="1.3 模型验证和预测"></a>1.3 模型验证和预测</h2><div class="hljs"><pre><code class="hljs ini"><span class="hljs-comment"># 在测试集上验证模型</span><span class="hljs-attr">results</span> = model.evaluate(x_test, y_test, batch_size=<span class="hljs-number">128</span>)</code></pre></div><div class="hljs"><pre><code class="hljs routeros"><span class="hljs-comment"># 对x_test的前三个样本进行预测</span>predictions = model.predict(x_test[:3])<span class="hljs-builtin-name">print</span>(y_test[:3], predictions.argmax(<span class="hljs-attribute">axis</span>=1))  # 分类的预测输出为10个分类的概率，这里取每行最大值的索引（即对应分类）</code></pre></div><h1 id="2-使用类别加权和样本加权"><a href="#2-使用类别加权和样本加权" class="headerlink" title="2. 使用类别加权和样本加权"></a>2. 使用类别加权和样本加权</h1><h2 id="2-1-类别加权"><a href="#2-1-类别加权" class="headerlink" title="2.1 类别加权"></a>2.1 类别加权</h2><p>model.fit()函数中包含参数<strong>class_weight</strong>，可以通过字典形式指定每个<strong>特征</strong>的权重。注意，该字典必须包含输入的<strong>全部特征</strong>，即字典长度等于输入的列数。</p><div class="hljs"><pre><code class="hljs routeros"><span class="hljs-comment"># 权重字典，使模型更重视5</span>class_weight = &#123;&#125;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10):    class_weight[i] = 1class_weight[5] = 2<span class="hljs-comment"># 传入权重参数进行训练</span>model.fit(x_train, y_train, <span class="hljs-attribute">batch_size</span>=100, <span class="hljs-attribute">epochs</span>=5, validation_data=(x_val, y_val), <span class="hljs-attribute">class_weight</span>=class_weight)</code></pre></div><h2 id="2-2-样本加权"><a href="#2-2-样本加权" class="headerlink" title="2.2 样本加权"></a>2.2 样本加权</h2><p>model.fit()函数中包含参数<strong>sample_weight</strong>，可以通过数组形式指定每个<strong>样本</strong>的权重。数组长度应等于输入的行数。</p><div class="hljs"><pre><code class="hljs nix"><span class="hljs-comment"># 权重列表，使模型更重视5</span><span class="hljs-attr">sample_weight</span> = np.ones(<span class="hljs-attr">shape=(len(y_train),))</span>  <span class="hljs-comment"># 所有样本权重为1</span>sample_weight[<span class="hljs-attr">y_train</span> == <span class="hljs-number">5</span>] = <span class="hljs-number">2</span>  <span class="hljs-comment"># 5的权重为2</span><span class="hljs-comment"># 传入权重参数进行训练</span>model.fit(x_train, y_train, <span class="hljs-attr">batch_size=100,</span> <span class="hljs-attr">epochs=5,</span> <span class="hljs-attr">validation_data=(x_val,</span> y_val), <span class="hljs-attr">sample_weight=sample_weight)</span></code></pre></div><h1 id="3-使用回调函数"><a href="#3-使用回调函数" class="headerlink" title="3. 使用回调函数"></a>3. 使用回调函数</h1><p>回调函数（Callback Function）是模型在训练中的特定时刻被调用的对象。</p><p>可以以列表的方式将需要使用的回调函数实例化后传入<code>model.fit()</code>的callbacks参数。</p><p>这里主要介绍三个回调函数。</p><h2 id="3-1-EarlyStopping-早停"><a href="#3-1-EarlyStopping-早停" class="headerlink" title="3.1 EarlyStopping(早停)"></a>3.1 EarlyStopping(早停)</h2><p>当被监视的指标不再改善时自动停止训练。一般需要指定的参数：</p><ul><li>monitor：监视的指标。</li><li>min_delta：变化量小于它即认为“不再改善”。</li><li>patience：容忍“不再改善”的次数。</li><li>mode：在’auto’、’min’、’max’中选择。’min’意为当指标不再下降时停止训练，’max’反之。</li></ul><div class="hljs"><pre><code class="hljs routeros"><span class="hljs-comment"># 设置回调函数</span>callbacks = [    tf.keras.callbacks.EarlyStopping(        <span class="hljs-attribute">monitor</span>=<span class="hljs-string">'val_loss'</span>,  # 监视val_loss        <span class="hljs-attribute">min_delta</span>=0.005,  # 变化小于0.005即认为没有改善        <span class="hljs-attribute">patience</span>=3,  # 没有改善的情况连续出现3次则停止训练        <span class="hljs-attribute">verbose</span>=2    )]<span class="hljs-comment">#　使用回调函数进行训练</span>model.fit(x_train, y_train, <span class="hljs-attribute">batch_size</span>=100, <span class="hljs-attribute">epochs</span>=100, validation_data=(x_val, y_val), <span class="hljs-attribute">callbacks</span>=callbacks)</code></pre></div><p>可以看到，虽然设置了100个epoch，但是由于连续3次val_loss变化小于0.005，训练自动停止。<br><img src="https://wx1.sbimg.cn/2020/06/07/3-1.png" srcset="/img/loading.gif" alt="EarlyStopping"></p><h2 id="3-2-ModelCheckpoint-定期自动保存模型"><a href="#3-2-ModelCheckpoint-定期自动保存模型" class="headerlink" title="3.2 ModelCheckpoint(定期自动保存模型)"></a>3.2 ModelCheckpoint(定期自动保存模型)</h2><p>在指定的时间点保存模型。一般需要指定的参数：</p><ul><li>filepath：保存路径，可以使用’{epoch}’等使每次保存的文件名不同。</li><li>monitor：监视的指标。</li><li>save_best_only：设置为True时，保存时若当前次的指标更好，会覆盖之前保存的模型。</li><li>save_weights_only：设置为True是仅保存模型的权重参数，而非整个模型。</li><li>save_freq：保存频率。一般设置为’epoch’，即每个epoch后保存；也可设置为整数，表示每训练一定数量的样本，就会在当前batch结束后保存。官方文档指出后者可能更不可靠。</li></ul><div class="hljs"><pre><code class="hljs routeros"><span class="hljs-comment"># 设置回调函数</span>callbacks = [    tf.keras.callbacks.ModelCheckpoint(        <span class="hljs-attribute">filepath</span>=<span class="hljs-string">'./checkpoints/MyModel_Checkpoint_&#123;epoch&#125;'</span>,  # 每个epoch对应的独立的文件        <span class="hljs-attribute">monitor</span>=<span class="hljs-string">'val_loss'</span>,        <span class="hljs-attribute">save_best_only</span>=<span class="hljs-literal">True</span>,  # 只有当评价指标改进时保存        <span class="hljs-attribute">save_weights_only</span>=<span class="hljs-literal">False</span>,  # 保存整个模型        <span class="hljs-attribute">verbose</span>=1    )]<span class="hljs-comment">#　使用回调函数进行训练</span>model.fit(x_train, y_train, <span class="hljs-attribute">batch_size</span>=100, <span class="hljs-attribute">epochs</span>=3, validation_data=(x_val, y_val), <span class="hljs-attribute">callbacks</span>=callbacks)</code></pre></div><p>由于设置了<code>verbose=1</code>，每次保存的信息都在训练过程中输出：<br><img src="https://wx2.sbimg.cn/2020/06/07/3-2.png" srcset="/img/loading.gif" alt="ModelCheckpoint"></p><h2 id="3-3-ReduceLROnPlateau-动态调整学习率"><a href="#3-3-ReduceLROnPlateau-动态调整学习率" class="headerlink" title="3.3 ReduceLROnPlateau(动态调整学习率)"></a>3.3 ReduceLROnPlateau(动态调整学习率)</h2><p>当模型不再改善时自动减小学习率。一般需要指定的参数：</p><ul><li>monitor: 监视的指标。</li><li>factor: new_lr = lr * factor。</li><li>patience: 容忍“不再改善”的次数。</li><li>mode: 在’auto’、’min’、’max’中选择。’min’意为当指标不再下降时修改学习率，’max’反之。</li><li>min_delta: 变化量小于它即认为“不再改善”。</li><li>cooldown：每次执行调整后，到下一次开始计算patience的间隔。</li><li>min_lr: 学习率的最小值。</li></ul><div class="hljs"><pre><code class="hljs routeros"><span class="hljs-comment"># 设置回调函数</span>callbacks = [    tf.keras.callbacks.ReduceLROnPlateau(        <span class="hljs-attribute">monitor</span>=<span class="hljs-string">'val_loss'</span>,        <span class="hljs-attribute">factor</span>=0.5,        <span class="hljs-attribute">patience</span>=3,        <span class="hljs-attribute">mode</span>=<span class="hljs-string">'max'</span>,        <span class="hljs-attribute">verbose</span>=1    )]<span class="hljs-comment">#　使用回调函数进行训练</span>model.fit(x_train, y_train, <span class="hljs-attribute">batch_size</span>=100, <span class="hljs-attribute">epochs</span>=20, validation_data=(x_val, y_val), <span class="hljs-attribute">callbacks</span>=callbacks)</code></pre></div><p>当未改善次数达到3次时将学习率调整为原来的0.5倍：<br><img src="https://wx1.sbimg.cn/2020/06/07/3-3.png" srcset="/img/loading.gif" alt="ReduceLROnPlateau"></p><h1 id="4-构建多输入、多输出模型"><a href="#4-构建多输入、多输出模型" class="headerlink" title="4. 构建多输入、多输出模型"></a>4. 构建多输入、多输出模型</h1><p>尝试构建一个具有2个输入、2个输出的模型。</p><p>输入：</p><ul><li>(32, 32, 3)：32×32的三通道图像。</li><li>(20, 10)：20个时间戳，10个特征。</li></ul><p>输出：</p><ul><li>(1,)：得分。</li><li>(5,)：分类。</li></ul><p>构建模型中损失函数和评价指标均可以以列表形式传入。</p><div class="hljs"><pre><code class="hljs ruby"><span class="hljs-comment"># 构建模型</span>from tensorflow.keras import layers<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span>(<span class="hljs-title">tf</span>.<span class="hljs-title">keras</span>.<span class="hljs-title">Model</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">super</span>(MyModel, <span class="hljs-keyword">self</span>).__init_<span class="hljs-number">_</span>()        <span class="hljs-comment"># 处理图像</span>        <span class="hljs-keyword">self</span>.conv1 = layers.Conv2D(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)        <span class="hljs-keyword">self</span>.pool1 = layers.GlobalMaxPooling2D()           <span class="hljs-comment"># 处理时间序列</span>        <span class="hljs-keyword">self</span>.conv2 = layers.Conv1D(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)        <span class="hljs-keyword">self</span>.pool2 = layers.GlobalMaxPooling1D()        <span class="hljs-comment"># 全连接层</span>        <span class="hljs-keyword">self</span>.dense1 = layers.Dense(<span class="hljs-number">1</span>, name=<span class="hljs-string">'score_output'</span>)        <span class="hljs-keyword">self</span>.dense2 = layers.Dense(<span class="hljs-number">5</span>, name=<span class="hljs-string">'class_output'</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, inputs)</span></span><span class="hljs-symbol">:</span>        x1 = <span class="hljs-keyword">self</span>.conv1(inputs[<span class="hljs-number">0</span>])        x1 = <span class="hljs-keyword">self</span>.pool1(x1)        x2 = <span class="hljs-keyword">self</span>.conv2(inputs[<span class="hljs-number">1</span>])        x2 = <span class="hljs-keyword">self</span>.pool2(x2)        x = layers.concatenate([x1, x2])        score_output = <span class="hljs-keyword">self</span>.dense1(x)        class_output = <span class="hljs-keyword">self</span>.dense2(x)        <span class="hljs-keyword">return</span> score_output, class_outputmodel = MyModel()model.compile(    optimizer=tf.keras.optimizers.RMSprop(<span class="hljs-number">1</span>e-<span class="hljs-number">3</span>),    <span class="hljs-comment"># 使用多个损失函数并命名</span>    loss=[        tf.keras.losses.MeanSquaredError(),        tf.keras.losses.CategoricalCrossentropy(from_logits=True)    ],    <span class="hljs-comment"># 指定损失函数的权重</span>    loss_weights=[<span class="hljs-number">2</span>., <span class="hljs-number">1</span>.],    <span class="hljs-comment"># 使用多个评价指标并命名</span>    metrics=[        [            tf.keras.metrics.MeanAbsolutePercentageError(),            tf.keras.metrics.MeanAbsoluteError()        ],        [            tf.keras.metrics.CategoricalAccuracy()        ]    ])</code></pre></div><p>这个模型的可视化参考如下，注意<code>tf.keras.utils.plot_model()</code>方法无法对子类化模型使用。<br><img src="https://wx1.sbimg.cn/2020/06/07/3-4.png" srcset="/img/loading.gif" alt="Plot"></p><div class="hljs"><pre><code class="hljs angelscript"># 生成数据<span class="hljs-keyword">import</span> numpy as npimg_data = np.random.random_sample(size=(<span class="hljs-number">500</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>))ts_data = np.random.random_sample(size=(<span class="hljs-number">500</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>))score_targets = np.random.random_sample(size=(<span class="hljs-number">500</span>, <span class="hljs-number">1</span>))class_targets = np.random.random_sample(size=(<span class="hljs-number">500</span>, <span class="hljs-number">5</span>))</code></pre></div><div class="hljs"><pre><code class="hljs cs"><span class="hljs-meta"># 训练</span>model.fit(    [<span class="hljs-meta">img_data, ts_data</span>],  <span class="hljs-meta"># 多输入</span>    [<span class="hljs-meta">score_targets, class_targets</span>],  <span class="hljs-meta"># 多输出</span>    batch_size=<span class="hljs-number">50</span>,    epochs=<span class="hljs-number">5</span>)</code></pre></div><p>训练结果：<br><img src="https://wx1.sbimg.cn/2020/06/07/3-5.png" srcset="/img/loading.gif" alt="Training"></p>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TF2]2. Tensor and Basic Modeling</title>
    <link href="/2020/2-TF2-Tensor-and-Basic-Modeling/"/>
    <url>/2020/2-TF2-Tensor-and-Basic-Modeling/</url>
    
    <content type="html"><![CDATA[<p>首先导入tensorflow，查看版本和设备信息：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfprint(tf.__version__)</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># print(tf.test.is_gpu_available())  # Not recommended, use following instead</span>print(tf.config.list_physical_devices(<span class="hljs-string">'GPU'</span>))</code></pre></div><h1 id="1-张量与操作"><a href="#1-张量与操作" class="headerlink" title="1. 张量与操作"></a>1. 张量与操作</h1><p>tensorflow中有两种表示变量的方式：tf.Variable和tf.Tensor。Variale在Tensor基础上有一些额外的功能，通常用于单独的数据操作；Tensor则通常用于保存计算的中间结果。</p><p>使用Python自带的数据格式创建Variable：<br><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># rank意为变量的维度</span>r0 = tf.Variable(<span class="hljs-string">'rank0'</span>, tf.string)print(r0, <span class="hljs-string">'\nrank: '</span>, tf.rank(r0), <span class="hljs-string">'  shape: '</span>, tf.shape(r0), <span class="hljs-string">'\n'</span>)  <span class="hljs-comment"># rank=1, shape=(1,)</span>r2 = tf.Variable([[<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>]], tf.int16)  <span class="hljs-comment"># rank=2, shape=(2,)</span>print(r2, <span class="hljs-string">'\nrank: '</span>, tf.rank(r2), <span class="hljs-string">'  shape: '</span>, tf.shape(r2), <span class="hljs-string">'\n'</span>)</code></pre></div></p><p>创建特殊矩阵、变型等方法类似于numpy：<br><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># create tensor</span>tf.constant([[<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>]], tf.int16)tf.zeros((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), tf.float16)<span class="hljs-comment"># print(tf.dtypes.cast(x, tf.int16))  # 改变格式</span></code></pre></div></p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># reshape</span>t = tf.ones((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), tf.int16)print(tf.reshape(t, (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)))</code></pre></div><p>Numpy与TensorFlow的一些函数对比:</p><div class="table-container"><table><thead><tr><th style="text-align:left">Numpy</th><th style="text-align:left">TensorFlow</th></tr></thead><tbody><tr><td style="text-align:left">a = np.zeros((2, 3))</td><td style="text-align:left">b = tf.zeros((2, 3))</td></tr><tr><td style="text-align:left">np.sum(a, axis=1)</td><td style="text-align:left">b = tf.reduce_sum(b, axis=1)</td></tr><tr><td style="text-align:left">a.shape</td><td style="text-align:left">b.get_shape()</td></tr><tr><td style="text-align:left">np.reshape(a, (3, 2))</td><td style="text-align:left">tf.reshape(b, (3, 2))</td></tr><tr><td style="text-align:left">a * 5 + 1</td><td style="text-align:left">b * 5 + 1</td></tr><tr><td style="text-align:left">np.dot(a, x)</td><td style="text-align:left">tf.matmul(b, x)</td></tr><tr><td style="text-align:left">a[0, 0]; a[:, 0]; a[0, :]</td><td style="text-align:left">b[0, 0]; b[:, 0]; b[0, :]</td></tr></tbody></table></div><p>常用的一些tensor操作包：</p><ul><li>tf.strings</li><li>tf.debugging</li><li>tf.dtypes</li><li>tf.math</li><li>tf.random</li><li>tf.feature_column</li></ul><h1 id="2-常用层"><a href="#2-常用层" class="headerlink" title="2. 常用层"></a>2. 常用层</h1><ul><li>tf.keras.layers：基于tf.nn高度封装的各种层</li><li>tf.nn：底层的函数库</li></ul><p>一些建立、配置层的基本操作：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 数据</span>a = tf.random.uniform((<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>), minval=<span class="hljs-number">-0.5</span>, maxval=<span class="hljs-number">0.5</span>)<span class="hljs-comment"># 实例化层对象</span>x = tf.keras.layers.LSTM(<span class="hljs-number">100</span>)(a)<span class="hljs-comment"># 在层中添加激活函数</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)tf.keras.layers.Dense(<span class="hljs-number">64</span>, activation=tf.nn.relu)<span class="hljs-comment"># L1正则化应用于内核矩阵</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, kernel_regularizer=tf.keras.regularizers.l1(<span class="hljs-number">0.01</span>))<span class="hljs-comment"># L2正则化应用于偏差函数</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, bias_regularizer=tf.keras.regularizers.l2(<span class="hljs-number">0.01</span>))<span class="hljs-comment"># 内核初始化为随机正交矩阵</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, kernel_initializer=<span class="hljs-string">'orthogonal'</span>)<span class="hljs-comment"># 偏差向量初始化为2.0</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, bias_initializer=tf.keras.initializers.Constant(<span class="hljs-number">2.0</span>))</code></pre></div><h1 id="3-三种建模方式"><a href="#3-三种建模方式" class="headerlink" title="3. 三种建模方式"></a>3. 三种建模方式</h1><p>tensorflow中有三种主要的建模方式，分别为顺序式、函数式和子类式。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers</code></pre></div><h2 id="1-Sequential-Model-顺序模型"><a href="#1-Sequential-Model-顺序模型" class="headerlink" title="(1) Sequential Model (顺序模型)"></a>(1) Sequential Model (顺序模型)</h2><p>顺序模型使用 tf.keras.Sequential ，适用于建立较为简单的、数据流向单一的模型。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 第一种方式：逐层添加</span>model = tf.keras.Sequential()model.add(layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>))model.add(layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>))model.add(layers.Dense(<span class="hljs-number">10</span>))</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 第二种方式：使用list传入</span>model = tf.keras.Sequential([    layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>, input_shape=(<span class="hljs-number">32</span>,)),    layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>),    layers.Dense(<span class="hljs-number">10</span>)])</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 配置模型训练用的参数</span>model.compile(    optimizer=tf.keras.optimizers.Adam(<span class="hljs-number">0.01</span>),    loss=tf.keras.losses.CategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),    metrics=[<span class="hljs-string">'accuracy'</span>])<span class="hljs-comment"># 训练</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npdata = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))labels = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))model.fit(data, labels, epochs=<span class="hljs-number">10</span>, batch_size=<span class="hljs-number">10</span>)</code></pre></div><h2 id="2-Functional-Model-函数模型"><a href="#2-Functional-Model-函数模型" class="headerlink" title="(2) Functional Model (函数模型)"></a>(2) Functional Model (函数模型)</h2><ul><li>多输入/多输出模型</li><li>具有共享图层的模型</li><li>具有非顺序数据流的模型</li></ul><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 输入，可以有多个</span>input1 = tf.keras.Input(shape=(<span class="hljs-number">32</span>,))input2 = tf.keras.Input(shape=(<span class="hljs-number">32</span>,))<span class="hljs-comment"># 层，各输入可以经过不同的层</span>x1 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)(input1)x2 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)(input2)x = tf.concat((x1, x2), axis=<span class="hljs-number">-1</span>)x = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)(x)<span class="hljs-comment"># 输出</span>pred = layers.Dense(<span class="hljs-number">10</span>)(x)</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 配置模型</span>model = tf.keras.Model(inputs=(input1, input2), outputs=pred)model.compile(    optimizer=tf.keras.optimizers.RMSprop(<span class="hljs-number">0.001</span>),    loss=tf.keras.losses.CategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),    metrics=[<span class="hljs-string">'accuracy'</span>])<span class="hljs-comment"># 生成数据，这里有两个输入</span>data1 = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))data2 = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))labels = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<span class="hljs-comment"># 训练</span>model.fit((data1, data2), labels, epochs=<span class="hljs-number">10</span>, batch_size=<span class="hljs-number">10</span>)</code></pre></div><h2 id="3-Subclassing-Model-子类化模型"><a href="#3-Subclassing-Model-子类化模型" class="headerlink" title="(3) Subclassing Model (子类化模型)"></a>(3) Subclassing Model (子类化模型)</h2><p>继承tf.keras.Model，高度可定制化。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 定义模型</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes=<span class="hljs-number">10</span>)</span>:</span>        super(MyModel, self).__init__(name=<span class="hljs-string">'my_model'</span>)        self.num_classes = num_classes        <span class="hljs-comment"># 定义模型中的层</span>        self.dense_1 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)        self.dense_2 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)        self.dense_3 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)        self.dense_4 = layers.Dense(<span class="hljs-number">10</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        <span class="hljs-comment"># 使用上面定义的层进行前向传播</span>        x1 = self.dense_1(inputs[<span class="hljs-number">0</span>])        x2 = self.dense_2(inputs[<span class="hljs-number">1</span>])        x = tf.concat((x1, x2), axis=<span class="hljs-number">-1</span>)        x = self.dense_3(x)        <span class="hljs-comment"># 输出</span>        pred = self.dense_4(x)        <span class="hljs-keyword">return</span> pred</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 配置模型</span>model = MyModel(num_classes=<span class="hljs-number">10</span>)model.compile(    optimizer=tf.keras.optimizers.RMSprop(<span class="hljs-number">0.001</span>),    loss=tf.keras.losses.CategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),    metrics=[<span class="hljs-string">'accuracy'</span>])<span class="hljs-comment"># 生成数据</span>data1 = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))data2 = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))labels = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<span class="hljs-comment"># 训练</span>model.fit((data1, data2), labels, epochs=<span class="hljs-number">10</span>, batch_size=<span class="hljs-number">10</span>)</code></pre></div><h1 id="4-练习"><a href="#4-练习" class="headerlink" title="4. 练习"></a>4. 练习</h1><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npiris = datasets.load_iris()data = iris.datalabels = iris.targetdata = np.concatenate((data,labels.reshape(<span class="hljs-number">150</span>,<span class="hljs-number">1</span>)),axis=<span class="hljs-number">-1</span>)np.random.shuffle(data)</code></pre></div><div class="hljs"><pre><code class="hljs python">data.shape</code></pre></div><div class="hljs"><pre><code class="hljs python">X = data[:,:<span class="hljs-number">4</span>]Y = data[:,<span class="hljs-number">-1</span>]print(X.shape, Y.shape)</code></pre></div><div class="hljs"><pre><code class="hljs python">print(np.unique(Y))</code></pre></div><div class="hljs"><pre><code class="hljs python">print(X[<span class="hljs-number">0</span>])</code></pre></div><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 自己完成的部分</span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<span class="hljs-keyword">import</span> tensorflow.keras.layers <span class="hljs-keyword">as</span> layers<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes=<span class="hljs-number">3</span>)</span>:</span>        super(MyModel, self).__init__()        self.num_classes = num_classes        self.Dense1 = layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">'relu'</span>, input_shape=(<span class="hljs-number">4</span>,))        self.Dense2 = layers.Dense(<span class="hljs-number">3</span>, activation=<span class="hljs-string">'relu'</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        x = self.Dense1(inputs)        x = self.Dense2(x)        <span class="hljs-keyword">return</span> xmodel = MyModel(num_classes=<span class="hljs-number">3</span>)</code></pre></div><div class="hljs"><pre><code class="hljs python">model.compile(optimizer=tf.keras.optimizers.Adam(),              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),              metrics=[tf.keras.metrics.SparseCategoricalAccuracy()])<span class="hljs-comment">#keras</span>model.fit(X, Y, batch_size=<span class="hljs-number">30</span>, epochs=<span class="hljs-number">50</span>, shuffle=<span class="hljs-literal">True</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Change-Font-of-CMD</title>
    <link href="/2020/Change-Font-of-CMD/"/>
    <url>/2020/Change-Font-of-CMD/</url>
    
    <content type="html"><![CDATA[<ol><li><p>安装字体，自己用的是Microsoft Yahei Mono，下载地址 <a href="https://pan.baidu.com/s/1hFn2oYs1lmbDmrZhjJ3QBA&amp;shfl=shareset" target="_blank" rel="noopener">https://pan.baidu.com/s/1hFn2oYs1lmbDmrZhjJ3QBA&amp;shfl=shareset</a> ，提取码: tfgr。</p></li><li><p>打开注册表：win+r输入regedit。</p></li><li><p>定位到计算机 \HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont ，将936的数值数据修改为*Microsoft Yahei Mono。</p></li><li><p>打开CMD，右键点击打开属性，设置字号等。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境设置</tag>
      
      <tag>系统设置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Difference Between &#39;+=&#39; and &#39;=+&#39;</title>
    <link href="/2020/Difference-Between-&#39;+=&#39;-and=&#39;=+&#39;/"/>
    <url>/2020/Difference-Between-&#39;+=&#39;-and=&#39;=+&#39;/</url>
    
    <content type="html"><![CDATA[<p>+=运算会在对象原地址之上进行修改，而=…+会新生成一个对象，似乎只继承了值，而没有保留其他属性。</p><p>起因：学习PyTorch时，在一个回归问题的训练过程中更新参数：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 初始化权重参数</span>w = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)b = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)<span class="hljs-comment"># 学习率</span>lr = <span class="hljs-number">0.001</span>loss = <span class="hljs-number">0</span><span class="hljs-comment"># 训练模型</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">500</span>):    <span class="hljs-comment"># 前向传播</span>    y_pred = torch.mm(torch.pow(x, <span class="hljs-number">2</span>), w) + b    <span class="hljs-comment"># 损失函数</span>    loss = torch.pow(y_pred - y, <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>    loss = loss.sum()    <span class="hljs-comment"># 计算梯度</span>    loss.backward()  <span class="hljs-comment"># 梯度存储在grad属性中</span>    <span class="hljs-comment"># 手动更新参数</span>    <span class="hljs-keyword">with</span> torch.no_grad():        w = w - lr * w.grad        b = b - lr * b.grad        <span class="hljs-comment"># 梯度清零</span>        w.grad.zero_()        b.grad.zero_()</code></pre></div><p>报了如下错误：</p><div class="hljs"><pre><code class="hljs Python">AttributeError: <span class="hljs-string">'NoneType'</span> object has no attribute <span class="hljs-string">'zero_'</span></code></pre></div><p>替换为如下后正确了：</p><div class="hljs"><pre><code class="hljs Python">w -= lr * w.gradb -= lr * b.grad</code></pre></div><p>进行测试：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 初始化权重参数</span>w = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)b = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)print(<span class="hljs-string">'更新前：\nw&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;;  b&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;'</span>.format(w, w.grad, id(w), b, b.grad, id(b)))lr = <span class="hljs-number">0.001</span>y_pred = torch.mm(torch.pow(x, <span class="hljs-number">2</span>), w) + bloss = torch.pow(y_pred - y, <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>loss = loss.sum()loss.backward()<span class="hljs-comment"># 不同方式更新参数</span><span class="hljs-keyword">with</span> torch.no_grad():    w = w - lr * w.grad    b -= lr * b.gradprint(<span class="hljs-string">'更新后：\nw&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;;  b&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;'</span>.format(w, w.grad, id(w), b, b.grad, id(b)))</code></pre></div><p>运行结果：</p><div class="hljs"><pre><code class="hljs Python">更新前：wtensor([[<span class="hljs-number">0.1969</span>]], requires_grad=<span class="hljs-literal">True</span>), 梯度<span class="hljs-literal">None</span>, 地址<span class="hljs-number">1166287893352</span>;  btensor([[<span class="hljs-number">-0.9487</span>]], requires_grad=<span class="hljs-literal">True</span>), 梯度<span class="hljs-literal">None</span>, 地址<span class="hljs-number">1166290443064</span>更新后：wtensor([[<span class="hljs-number">0.3587</span>]]), 梯度<span class="hljs-literal">None</span>, 地址<span class="hljs-number">1166290440344</span>;  btensor([[<span class="hljs-number">-0.5492</span>]], requires_grad=<span class="hljs-literal">True</span>), 梯度tensor([[<span class="hljs-number">-399.5237</span>]]), 地址<span class="hljs-number">1166290443064</span></code></pre></div><p>w的地址发生了改变且没有继承原来的梯度。</p>]]></content>
    
    
    <categories>
      
      <category>Pytorch学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pip tips</title>
    <link href="/2020/pip-tips/"/>
    <url>/2020/pip-tips/</url>
    
    <content type="html"><![CDATA[<h3 id="1-指定源"><a href="#1-指定源" class="headerlink" title="1. 指定源"></a>1. 指定源</h3><p>使用如下方法指定源：</p><div class="hljs"><pre><code class="hljs sql">pip <span class="hljs-keyword">install</span> &lt;<span class="hljs-keyword">package</span>&gt; -i &lt;<span class="hljs-keyword">source</span>&gt;</code></pre></div><p>最常用的国内源是 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a> 清华源。</p><h3 id="2-设置超时时间"><a href="#2-设置超时时间" class="headerlink" title="2. 设置超时时间"></a>2. 设置超时时间</h3><p>使用如下方法设置超时时间（单位为秒）：</p><div class="hljs"><pre><code class="hljs verilog">pip install --<span class="hljs-keyword">default</span>-<span class="hljs-keyword">time</span>=&lt;<span class="hljs-keyword">time</span>&gt; &lt;<span class="hljs-keyword">package</span>&gt;</code></pre></div><h3 id="3-本地安装方法"><a href="#3-本地安装方法" class="headerlink" title="3. 本地安装方法"></a>3. 本地安装方法</h3><p>首先在对应的环境中执行以下代码，可以查看这个环境的pip支持的安装包类型：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">pip</span><span class="hljs-selector-class">._internal</span><span class="hljs-selector-class">.pep425tags</span><span class="hljs-selector-tag">print</span>(<span class="hljs-selector-tag">pip</span><span class="hljs-selector-class">._internal</span><span class="hljs-selector-class">.pep425tags</span><span class="hljs-selector-class">.get_supported</span>())</code></pre></div><p>然后到 <a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a> 或其他源网站，搜索需要的包。</p><ul><li>在 Release history 中可以选择自己需要的版本。</li><li>在 Download files 中可以找到安装包，选择自己的pip支持的类型下载到本地。</li></ul><p>下载完成后，使用pip安装即可。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>pip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TF2]1. Installation</title>
    <link href="/2020/1-TF2-Installation/"/>
    <url>/2020/1-TF2-Installation/</url>
    
    <content type="html"><![CDATA[<p>在 <a href="https://tensorflow.google.cn/install/gpu" target="_blank" rel="noopener">https://tensorflow.google.cn/install/gpu</a> 中查看各个依赖软件的版本要求。</p><h4 id="1-安装Nvidia驱动"><a href="#1-安装Nvidia驱动" class="headerlink" title="1. 安装Nvidia驱动"></a><strong>1. 安装Nvidia驱动</strong></h4><p>可以直接在GeForce Experience中更新驱动程序，或在 <a href="https://www.geforce.cn/drivers" target="_blank" rel="noopener">https://www.geforce.cn/drivers</a> 查找与自己显卡相符的驱动程序下载安装。</p><h4 id="2-安装CUDA"><a href="#2-安装CUDA" class="headerlink" title="2. 安装CUDA"></a><strong>2. 安装CUDA</strong></h4><p>进入<a href="https://developer.nvidia.com/cuda-toolkit" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit</a> ，选择下载，进入选择页面。</p><p>点击Legacy Releases，选择需要的CUDA版本。自己安装的是TensorFlow2.1.0，需要的CUDA版本为10.1。</p><p>进入系统选择页面，选择Windows-x86_64-10，安装方式建议exe(local)，方式因网络问题造成安装失败。</p><p>选择Base Installer中的Download，下载CUDA的本地安装包，安装。默认安装路径为C:\ProgramData\NVIDIA GPU Computing Toolkit。</p><p>安装完成后，在命令行运行<code>nvcc -V</code>查看CUDA版本以验证安装是否成功。</p><h4 id="3-安装CUDNN"><a href="#3-安装CUDNN" class="headerlink" title="3. 安装CUDNN"></a><strong>3. 安装CUDNN</strong></h4><p>进入<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download</a> ，登录并填写问卷，进入下载页面。选择与CUDA版本相符的CUDNN，这里选择cuDNN v7.6.5 (November 5th, 2019) for CUDA 10.1，<br>cuDNN Library for Windows 10下载。</p><p>下载完成后，解压压缩包，将三个文件夹中的文件分别移动至CUDA安装路径中的对应文件夹里。</p><h4 id="4-安装TensorFlow"><a href="#4-安装TensorFlow" class="headerlink" title="4. 安装TensorFlow"></a><strong>4. 安装TensorFlow</strong></h4><ul><li>网络环境好：</li></ul><p>直接使用<code>pip install tensorflow-gpu==2.1.0</code>即可安装所有依赖库。</p><ul><li><p>网络环境不好，直接使用pip容易失败：</p><p>在 <a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a> 直接搜索需要的库，在release history中选择合适版本，下载后进行本地安装<code>pip install [本地路径]</code>。</p><p>查看pip支持的安装包类型，可以在需要安装TensorFlow的python环境中执行：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pip._internal.pep425tagsprint(pip._internal.pep425tags.get_supported())</code></pre></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test Blog</title>
    <link href="/2020/Test-Blog/"/>
    <url>/2020/Test-Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="标题测试"><a href="#标题测试" class="headerlink" title="标题测试"></a>标题测试</h1><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><ul><li>行内公式$ c = \sqrt{a^{2}+b_{xy}^{2}+e^{x}} $</li><li><p>公式块</p><script type="math/tex; mode=display">c = \sqrt{a^{2}+b_{xy}^{2} +e^{x}}</script><blockquote><p>引用</p></blockquote></li></ul><p><em>粗体</em>   <strong>斜体</strong></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="table-container"><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><div class="hljs"><pre><code class="hljs python3">import numpy as np</code></pre></div><h2 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h2><ul><li>图片<br><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" srcset="/img/loading.gif" alt="测试图片"></li><li>图片链接<br><a href="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" target="_blank" rel="noopener">测试图片</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/hello-world/"/>
    <url>/2020/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="hljs"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="hljs"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="hljs"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="hljs"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
