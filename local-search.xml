<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[TF2]8. Custom Loss Funstion</title>
    <link href="/2020/8-TF2-Custom-Loss-Function/"/>
    <url>/2020/8-TF2-Custom-Loss-Function/</url>
    
    <content type="html"><![CDATA[<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfprint(tf.__version__)<span class="hljs-comment"># 2.1.1</span></code></pre></div><h1 id="1-常用损失函数"><a href="#1-常用损失函数" class="headerlink" title="1. 常用损失函数"></a>1. 常用损失函数</h1><ul><li>mean_square_error：平方差误差，一般用于回归问题。</li><li>binary_crossentropy：二元交叉熵，用于二元分类问题。</li><li>categorical_crossentropy：类别交叉熵，用于<strong>label为onehot编码</strong>的多分类问题。</li><li>sparse_categorical_crossentropy：稀疏类别交叉熵，用于<strong>label为序号编码</strong>的多分类问题。</li></ul><h1 id="2-自定义损失函数"><a href="#2-自定义损失函数" class="headerlink" title="2. 自定义损失函数"></a>2. 自定义损失函数</h1><p>在训练mnist数据集的过程中，使用自定义的FocalLoss损失函数。</p><h2 id="2-1-准备数据"><a href="#2-1-准备数据" class="headerlink" title="2.1 准备数据"></a>2.1 准备数据</h2><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltmnist = np.load(<span class="hljs-string">'./data/mnist.npz'</span>)x_train, y_train, x_test, y_test = mnist[<span class="hljs-string">'x_train'</span>] / <span class="hljs-number">255.0</span>, mnist[<span class="hljs-string">'y_train'</span>], mnist[<span class="hljs-string">'x_test'</span>] / <span class="hljs-number">255.0</span>, mnist[<span class="hljs-string">'y_test'</span>]print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/30/2uHC6.png" srcset="/img/loading.gif" alt="Shape-1"></p><p>可以看到，训练集中有60000条数据，每条数据是一个28*28的图像，对应一个标签（0-9）；测试集有10000条数据。</p><div class="hljs"><pre><code class="hljs Python">fig, ax = plt.subplots(    nrows=<span class="hljs-number">2</span>,    ncols=<span class="hljs-number">5</span>,    sharex=<span class="hljs-literal">True</span>,    sharey=<span class="hljs-literal">True</span>, )ax = ax.flatten()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):    img = x_train[y_train == i][<span class="hljs-number">0</span>].reshape(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)    ax[i].imshow(img, cmap=<span class="hljs-string">'Greys'</span>, interpolation=<span class="hljs-string">'nearest'</span>)ax[<span class="hljs-number">0</span>].set_xticks([])ax[<span class="hljs-number">0</span>].set_yticks([])plt.tight_layout()plt.show()</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/30/2uKLO.png" srcset="/img/loading.gif" alt="Plot"></p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 加入新的轴</span>x_train = x_train[..., tf.newaxis]x_test = x_test[..., tf.newaxis]<span class="hljs-comment"># 将标签转换为独热变量</span>y_train = tf.one_hot(y_train,depth=<span class="hljs-number">10</span>)y_test = tf.one_hot(y_test,depth=<span class="hljs-number">10</span>)<span class="hljs-comment"># 建立Dataset</span>train_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(<span class="hljs-number">10000</span>).batch(<span class="hljs-number">32</span>)test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(<span class="hljs-number">32</span>)print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/30/2ut9A.png" srcset="/img/loading.gif" alt="Shape-2"></p><h2 id="2-2-自定义FocalLoss损失函数"><a href="#2-2-自定义FocalLoss损失函数" class="headerlink" title="2.2 自定义FocalLoss损失函数"></a>2.2 自定义FocalLoss损失函数</h2><p>多分类的FocalLoss损失函数：</p><script type="math/tex; mode=display">FL(p_t) = \sum_{c=1}^{m} -(1-p_t)^{\gamma} * y_c * \log(p_t)</script><p>使用类的方式自定义损失函数，需继承<code>tf.keras.losses.Loss</code>类：<br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 类方式</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FocalLoss_cls</span><span class="hljs-params">(tf.keras.losses.Loss)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, gamma=<span class="hljs-number">2.0</span>, alpha=<span class="hljs-number">0.25</span>)</span>:</span>        self.gamma = gamma        self.alpha = alpha        super(FocalLoss_cls, self).__init__()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, y_true, y_pred)</span>:</span>        y_pred = tf.nn.softmax(y_pred, axis=<span class="hljs-number">-1</span>)  <span class="hljs-comment"># 转换为概率</span>        epsilon = tf.keras.backend.epsilon()  <span class="hljs-comment"># 防止值为0导致log计算出错</span>        y_pred = tf.clip_by_value(y_pred, epsilon, <span class="hljs-number">1.0</span>)  <span class="hljs-comment"># 值的下限为epsilon，上限为1</span>        y_true = tf.cast(y_true, tf.float32)        loss = -y_true * tf.math.pow(<span class="hljs-number">1</span> - y_pred, self.gamma) * tf.math.log(y_pred)        loss = tf.math.reduce_sum(loss)        <span class="hljs-keyword">return</span> loss</code></pre></div></p><p>使用函数方式自定义损失函数：<br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 函数方式</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FocalLoss_func</span><span class="hljs-params">(gamma=<span class="hljs-number">2.0</span>, alpha=<span class="hljs-number">0.25</span>)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">focal_loss_fixed</span><span class="hljs-params">(y_true, y_pred)</span>:</span>        y_pred = tf.nn.softmax(y_pred, axis=<span class="hljs-number">-1</span>)  <span class="hljs-comment"># 转换为概率</span>        epsilon = tf.keras.backend.epsilon()  <span class="hljs-comment"># 防止值为0导致log计算出错</span>        y_pred = tf.clip_by_value(y_pred, epsilon, <span class="hljs-number">1.0</span>)  <span class="hljs-comment"># 值的下限为epsilon，上限为1</span>        y_true = tf.cast(y_true, tf.float32)        loss = -y_true * tf.math.pow(<span class="hljs-number">1</span> - y_pred, gamma) * tf.math.log(y_pred)        loss = tf.math.reduce_sum(loss)        <span class="hljs-keyword">return</span> loss    <span class="hljs-keyword">return</span> focal_loss_fixed</code></pre></div></p><h1 id="3-训练模型"><a href="#3-训练模型" class="headerlink" title="3. 训练模型"></a>3. 训练模型</h1><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Conv2D, Flatten, Dense<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>        super(MyModel, self).__init__()        self.conv  =Conv2D(<span class="hljs-number">32</span>, <span class="hljs-number">3</span>, activation=<span class="hljs-string">'relu'</span>)        self.flatten = Flatten()        self.dense1 = Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">'relu'</span>)        self.dense2 = Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">'softmax'</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, x)</span>:</span>        x = self.conv(x)        x = self.flatten(x)        x = self.dense1(x)        x = self.dense2(x)        <span class="hljs-keyword">return</span> x</code></pre></div><div class="hljs"><pre><code class="hljs Python">model = MyModel()model.compile(    optimizer=tf.keras.optimizers.Adam(<span class="hljs-number">0.001</span>),    loss=FocalLoss_cls(gamma=<span class="hljs-number">2.0</span>, alpha=<span class="hljs-number">0.25</span>),    metrics=[tf.keras.metrics.CategoricalAccuracy()])model.fit(train_ds, epochs=<span class="hljs-number">5</span>, validation_data=test_ds)</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/30/2uwtV.png" srcset="/img/loading.gif" alt="Train-1"></p><div class="hljs"><pre><code class="hljs Python">model = MyModel()model.compile(    optimizer=tf.keras.optimizers.Adam(<span class="hljs-number">0.001</span>),    loss=FocalLoss_func(gamma=<span class="hljs-number">2.0</span>, alpha=<span class="hljs-number">0.25</span>),    metrics=[tf.keras.metrics.CategoricalAccuracy()])model.fit(train_ds, epochs=<span class="hljs-number">5</span>, validation_data=test_ds)</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/30/2uzl7.png" srcset="/img/loading.gif" alt="Train-2"></p>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Grammer Analyzer Based On Python and Qt</title>
    <link href="/2020/Grammer-Analyzer/"/>
    <url>/2020/Grammer-Analyzer/</url>
    
    <content type="html"><![CDATA[<p>编译原理课程的大作业，要求为实现一个带有图形界面的语法分析器，能够求First集、Follow集、LL分析表和LR分析表。</p><p>项目地址：<a href="https://github.com/LiShaoyu5/LL-LR-Parser" target="_blank" rel="noopener">https://github.com/LiShaoyu5/LL-LR-Parser</a></p><p>测试不多，还有很多问题待修改。</p><h1 id="1-环境要求"><a href="#1-环境要求" class="headerlink" title="1. 环境要求"></a>1. 环境要求</h1><p>开发环境：Python 3.7.7, PyQt 5.13.0</p><p>使用PyInstaller 3.6打包为可执行程序。</p><h1 id="2-使用说明"><a href="#2-使用说明" class="headerlink" title="2. 使用说明"></a>2. 使用说明</h1><h2 id="2-1-可执行程序"><a href="#2-1-可执行程序" class="headerlink" title="2.1 可执行程序"></a>2.1 可执行程序</h2><p>由于单个文件25MB的大小限制，可执行程序没有上传到Github。在源码目录下，具有上节环境的命令行中执行命令：</p><div class="hljs"><pre><code class="hljs reasonml">pyinstaller -F -w <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MainWindow</span>.</span></span>py</code></pre></div><p>生成可执行程序。</p><h2 id="2-2-输入说明"><a href="#2-2-输入说明" class="headerlink" title="2.2 输入说明"></a>2.2 输入说明</h2><p>一条规范的推导式示例：A-&gt;c|Bc|ε</p><ul><li>推出符号为-&gt;，空符号为ε，候选式分隔符为|。</li><li>推导式中不应包含空格。</li><li>每条推导式占一行。</li><li>符号集（包括终结符和非终结符）中不应包含#、-、&gt;、|、’、”、\、·，符号集只接受单个字符，如E’会被识别为E和’。</li><li>同一非终结符可推出的候选式不应有重复。</li><li>同一非终结符可推出的候选式应写在同一行。错误的写法： A-&gt;a A-&gt;b；正确的写法：A-&gt;a|b。</li><li>此条不影响程序运行，但推荐使用大写字母表示非终结符、小写字母或数字表示终结符。</li></ul><h1 id="3-运行截图"><a href="#3-运行截图" class="headerlink" title="3. 运行截图"></a>3. 运行截图</h1><p><img src="https://wx1.sbimg.cn/2020/06/26/2ApXM.png" srcset="/img/loading.gif" alt="test1"></p><p><img src="https://wx1.sbimg.cn/2020/06/26/2AXnh.png" srcset="/img/loading.gif" alt="test2"></p><p><img src="https://wx1.sbimg.cn/2020/06/26/2AMLn.png" srcset="/img/loading.gif" alt="test3"></p><p><img src="https://wx1.sbimg.cn/2020/06/26/2Akca.png" srcset="/img/loading.gif" alt="test4"></p><h1 id="4-源代码"><a href="#4-源代码" class="headerlink" title="4. 源代码"></a>4. 源代码</h1><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># MainWindow.py</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore, QtGui, QtWidgets<span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QFileDialog, QTableWidgetItem<span class="hljs-comment"># 状态集</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">State</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, root, content, isroot, parent, idx)</span>:</span>        self.root = root  <span class="hljs-comment"># 基本推导式集</span>        self.content = content  <span class="hljs-comment"># 此状态内的推导式集</span>        self.isroot = isroot  <span class="hljs-comment"># 是否为IO</span>        self.parent = parent  <span class="hljs-comment"># 父节点</span>        self.next = &#123;&#125;  <span class="hljs-comment"># 子节点</span>        self.idx = idx  <span class="hljs-comment"># 状态集编号</span>        self.VN = []  <span class="hljs-comment"># 非终结符集</span>        self.Symbol = []  <span class="hljs-comment"># 符号集</span>        self.EndNum = &#123;&#125;  <span class="hljs-comment"># 文法中已推导至结束的式子数和式子总数</span>        <span class="hljs-keyword">if</span> root:            self.GetSymbol()            self.Generate()            self.FindNext()    <span class="hljs-comment"># 自己是否为终结态</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">End</span><span class="hljs-params">(self)</span>:</span>        cnt = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> self.content:            <span class="hljs-keyword">if</span> c[<span class="hljs-number">-1</span>] == <span class="hljs-string">'·'</span>:                cnt += <span class="hljs-number">1</span>        self.EndNum = &#123;<span class="hljs-string">'end'</span>: cnt, <span class="hljs-string">'all'</span>: len(self.content)&#125;    <span class="hljs-comment"># 得到符号集</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetSymbol</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-comment"># 非终结符</span>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> self.root:            self.VN.append(c[<span class="hljs-number">0</span>])        self.VN = list(set(self.VN))        <span class="hljs-comment"># 所有符号</span>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> self.root:            <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> c:                <span class="hljs-keyword">if</span> r <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.Symbol <span class="hljs-keyword">and</span> r <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">'·'</span>, <span class="hljs-string">'-'</span>, <span class="hljs-string">'&gt;'</span>]:                    self.Symbol.append(r)    <span class="hljs-comment"># 生成此状态集中的推导式</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Generate</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-comment"># 根节点内的推导式集就是基本推导式集</span>        <span class="hljs-keyword">if</span> self.isroot:            self.content = self.root        <span class="hljs-comment"># 非根节点的推导式集</span>        <span class="hljs-keyword">else</span>:            new_content = []            <span class="hljs-comment"># 将父节点传来的推导式中·后移一位</span>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> self.content:                c = c.split(<span class="hljs-string">'·'</span>)                c = c[<span class="hljs-number">0</span>] + c[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">'·'</span> + c[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>:]                new_content.append(c)            <span class="hljs-comment"># 若存在·VN的形式，则将所有VN-&gt;*的推导式加入</span>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> new_content:                <span class="hljs-keyword">if</span> c.index(<span class="hljs-string">'·'</span>) == len(c) - <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> c[<span class="hljs-number">-1</span>] <span class="hljs-keyword">in</span> self.VN:                    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> self.root:                        <span class="hljs-keyword">if</span> r[<span class="hljs-number">0</span>] == c[<span class="hljs-number">-1</span>]:                            new_content.append(r)            new_content = list(set(new_content))            self.content = new_content    <span class="hljs-comment"># 得到每个符号对应的下一个状态中的推导式</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindNext</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> self.Symbol:            self.next[s] = []        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> self.content:            pos = c.index(<span class="hljs-string">'·'</span>)            <span class="hljs-keyword">if</span> pos != len(c) - <span class="hljs-number">1</span>:                <span class="hljs-comment"># ·之后符号对应的next里加入这个式子</span>                self.next[c[pos + <span class="hljs-number">1</span>]].append(c)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ui_MainWindow</span><span class="hljs-params">(object)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setupUi</span><span class="hljs-params">(self, MainWindow)</span>:</span>        MainWindow.setObjectName(<span class="hljs-string">"Analyzer"</span>)        MainWindow.resize(<span class="hljs-number">1200</span>, <span class="hljs-number">750</span>)        MainWindow.setFixedSize(<span class="hljs-number">1200</span>, <span class="hljs-number">750</span>)        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)        sizePolicy.setHorizontalStretch(<span class="hljs-number">0</span>)        sizePolicy.setVerticalStretch(<span class="hljs-number">0</span>)        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())        MainWindow.setSizePolicy(sizePolicy)        font = QtGui.QFont()        font.setFamily(<span class="hljs-string">"微软雅黑"</span>)        font.setPointSize(<span class="hljs-number">12</span>)        MainWindow.setFont(font)        self.Base = QtWidgets.QWidget(MainWindow)        self.Base.setObjectName(<span class="hljs-string">"Base"</span>)        self.InputArea = QtWidgets.QTextEdit(self.Base)        self.InputArea.setGeometry(QtCore.QRect(<span class="hljs-number">50</span>, <span class="hljs-number">40</span>, <span class="hljs-number">520</span>, <span class="hljs-number">300</span>))        self.InputArea.setObjectName(<span class="hljs-string">"InputArea"</span>)        self.FirstSet = QtWidgets.QTextEdit(self.Base)        self.FirstSet.setGeometry(QtCore.QRect(<span class="hljs-number">50</span>, <span class="hljs-number">375</span>, <span class="hljs-number">520</span>, <span class="hljs-number">150</span>))        self.FirstSet.setObjectName(<span class="hljs-string">"FirstSet"</span>)        self.FollowSet = QtWidgets.QTextEdit(self.Base)        self.FollowSet.setGeometry(QtCore.QRect(<span class="hljs-number">50</span>, <span class="hljs-number">560</span>, <span class="hljs-number">520</span>, <span class="hljs-number">150</span>))        self.FollowSet.setObjectName(<span class="hljs-string">"FollowSet"</span>)        self.AnalyticalTable = QtWidgets.QTableWidget(self.Base)        self.AnalyticalTable.setGeometry(QtCore.QRect(<span class="hljs-number">630</span>, <span class="hljs-number">40</span>, <span class="hljs-number">520</span>, <span class="hljs-number">485</span>))        self.AnalyticalTable.setObjectName(<span class="hljs-string">"AnalyticalTable"</span>)        self.AnalyticalTable.setColumnCount(<span class="hljs-number">50</span>)        self.AnalyticalTable.setRowCount(<span class="hljs-number">50</span>)        self.RunButton = QtWidgets.QPushButton(self.Base)        self.RunButton.setGeometry(QtCore.QRect(<span class="hljs-number">670</span>, <span class="hljs-number">570</span>, <span class="hljs-number">170</span>, <span class="hljs-number">45</span>))        self.RunButton.setObjectName(<span class="hljs-string">"RunButton"</span>)        self.ClearButton = QtWidgets.QPushButton(self.Base)        self.ClearButton.setGeometry(QtCore.QRect(<span class="hljs-number">940</span>, <span class="hljs-number">570</span>, <span class="hljs-number">170</span>, <span class="hljs-number">45</span>))        self.ClearButton.setObjectName(<span class="hljs-string">"ClearButton"</span>)        self.HelpButton = QtWidgets.QPushButton(self.Base)        self.HelpButton.setGeometry(QtCore.QRect(<span class="hljs-number">940</span>, <span class="hljs-number">655</span>, <span class="hljs-number">170</span>, <span class="hljs-number">45</span>))        self.HelpButton.setObjectName(<span class="hljs-string">"HelpButton"</span>)        self.OpenButton = QtWidgets.QPushButton(self.Base)        self.OpenButton.setGeometry(QtCore.QRect(<span class="hljs-number">670</span>, <span class="hljs-number">655</span>, <span class="hljs-number">170</span>, <span class="hljs-number">45</span>))        self.OpenButton.setObjectName(<span class="hljs-string">"OpenButton"</span>)        self.label_1 = QtWidgets.QLabel(self.Base)        self.label_1.setGeometry(QtCore.QRect(<span class="hljs-number">50</span>, <span class="hljs-number">15</span>, <span class="hljs-number">121</span>, <span class="hljs-number">21</span>))        self.label_1.setObjectName(<span class="hljs-string">"label_1"</span>)        self.label_2 = QtWidgets.QLabel(self.Base)        self.label_2.setGeometry(QtCore.QRect(<span class="hljs-number">50</span>, <span class="hljs-number">350</span>, <span class="hljs-number">121</span>, <span class="hljs-number">21</span>))        self.label_2.setObjectName(<span class="hljs-string">"label_2"</span>)        self.label_3 = QtWidgets.QLabel(self.Base)        self.label_3.setGeometry(QtCore.QRect(<span class="hljs-number">50</span>, <span class="hljs-number">535</span>, <span class="hljs-number">121</span>, <span class="hljs-number">21</span>))        self.label_3.setObjectName(<span class="hljs-string">"label_3"</span>)        self.label_4 = QtWidgets.QLabel(self.Base)        self.label_4.setGeometry(QtCore.QRect(<span class="hljs-number">630</span>, <span class="hljs-number">15</span>, <span class="hljs-number">121</span>, <span class="hljs-number">21</span>))        self.label_4.setObjectName(<span class="hljs-string">"label_4"</span>)        MainWindow.setCentralWidget(self.Base)        self.retranslateUi(MainWindow)        QtCore.QMetaObject.connectSlotsByName(MainWindow)        <span class="hljs-comment"># 自定义变量</span>        self.SymbolSet = []  <span class="hljs-comment"># 符号集，保存每一个符号</span>        self.Derivation = &#123;&#125;  <span class="hljs-comment"># 推导式集，以字典形式保存，key为str型左侧非终结符，value为list型右侧候选式</span>        self.First = &#123;&#125;  <span class="hljs-comment"># First集，</span>        self.Follow = &#123;&#125;  <span class="hljs-comment"># Follow集</span>        self.VT = []  <span class="hljs-comment"># 终结符集</span>        self.VN = []  <span class="hljs-comment"># 非终结符集</span>        self.e_list = [<span class="hljs-string">'ε'</span>]  <span class="hljs-comment"># 可推导出ε的符号集</span>        self.I = []  <span class="hljs-comment"># 状态集</span>        <span class="hljs-comment"># 自定义槽函数</span>        self.OpenButton.clicked.connect(self.OpenFile)        self.RunButton.clicked.connect(self.Analyze)        self.ClearButton.clicked.connect(self.Clear)        self.HelpButton.clicked.connect(self.Help)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">retranslateUi</span><span class="hljs-params">(self, MainWindow)</span>:</span>        _translate = QtCore.QCoreApplication.translate        MainWindow.setWindowTitle(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"Analyzer"</span>))        self.InputArea.setPlaceholderText(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"输入文法前请先确认符合同目录下操作手册.docx中的规范！"</span>))        self.RunButton.setText(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"分析"</span>))        self.ClearButton.setText(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"清空"</span>))        self.HelpButton.setText(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"帮助"</span>))        self.OpenButton.setText(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"从文件打开.."</span>))        self.label_1.setText(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"输入区"</span>))        self.label_2.setText(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"First集"</span>))        self.label_3.setText(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"Follow集"</span>))        self.label_4.setText(_translate(<span class="hljs-string">"MainWindow"</span>, <span class="hljs-string">"分析表"</span>))    <span class="hljs-comment"># 从文件读入文法</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">OpenFile</span><span class="hljs-params">(self)</span>:</span>        self.Clear()        fname = QFileDialog.getOpenFileName(self.OpenButton, <span class="hljs-string">'打开文件'</span>, <span class="hljs-string">'.'</span>)        <span class="hljs-keyword">if</span> fname[<span class="hljs-number">0</span>]:            f = open(fname[<span class="hljs-number">0</span>], <span class="hljs-string">'r'</span>, encoding=<span class="hljs-string">'utf-8'</span>)            <span class="hljs-keyword">with</span> f:                data = f.read()                self.InputArea.setText(data)    <span class="hljs-comment"># 分析文法</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Analyze</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">if</span> self.SymbolSet:            <span class="hljs-keyword">return</span>        content = self.InputArea.toPlainText()        <span class="hljs-keyword">if</span> content == <span class="hljs-string">''</span>:            self.FirstSet.setText(<span class="hljs-string">'没有输入！'</span>)            self.FollowSet.setText(<span class="hljs-string">'没有输入！'</span>)        <span class="hljs-keyword">else</span>:            data = self.InputArea.toPlainText()            <span class="hljs-comment"># 获取符号集</span>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> data:                <span class="hljs-keyword">if</span> c != <span class="hljs-string">'|'</span> <span class="hljs-keyword">and</span> c != <span class="hljs-string">'-'</span> <span class="hljs-keyword">and</span> c != <span class="hljs-string">'&gt;'</span> <span class="hljs-keyword">and</span> c != <span class="hljs-string">'\n'</span> <span class="hljs-keyword">and</span> c != <span class="hljs-string">' '</span> <span class="hljs-keyword">and</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.SymbolSet:                    self.SymbolSet.append(c)            <span class="hljs-comment"># 按行拆分，读取推导规则，保存为字典格式</span>            data = data.split(<span class="hljs-string">'\n'</span>)            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data:                <span class="hljs-keyword">if</span> line == <span class="hljs-string">''</span>:                    <span class="hljs-keyword">continue</span>                line = line.split(<span class="hljs-string">'-&gt;'</span>)                self.Derivation[line[<span class="hljs-number">0</span>]] = line[<span class="hljs-number">1</span>].split(<span class="hljs-string">'|'</span>)  <span class="hljs-comment"># 左侧为key，右侧为value（list格式）</span>            <span class="hljs-comment"># 建立终结符集和非终结符集</span>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> self.SymbolSet:                <span class="hljs-keyword">if</span> s <span class="hljs-keyword">in</span> self.Derivation.keys():                    self.VN.append(s)                <span class="hljs-keyword">else</span>:                    self.VT.append(s)            <span class="hljs-comment"># 建立First集</span>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> self.SymbolSet:  <span class="hljs-comment"># 初始化</span>                self.First[c] = []            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> self.SymbolSet:  <span class="hljs-comment"># 建立First集</span>                self.FindFirst(c)            <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> self.First.keys():  <span class="hljs-comment"># 去重</span>                self.First[key] = list(set(self.First[key]))            <span class="hljs-comment"># 设置文本显示，将self.First（字典）转换为字符串，添加换行，去掉空格和单引号</span>            text = <span class="hljs-string">'符号的First集：\n'</span>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> self.First.items():                <span class="hljs-comment"># 去掉引号，将list的[]换成集合的&#123;&#125;</span>                text += <span class="hljs-string">'First('</span> + str(item[<span class="hljs-number">0</span>]).replace(<span class="hljs-string">'\''</span>, <span class="hljs-string">''</span>) + <span class="hljs-string">'): '</span> \                        + str(item[<span class="hljs-number">1</span>]).replace(<span class="hljs-string">'\''</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'['</span>, <span class="hljs-string">'&#123;'</span>).replace(<span class="hljs-string">']'</span>, <span class="hljs-string">'&#125;'</span>) \                        + <span class="hljs-string">'\n'</span>            text += <span class="hljs-string">'\n候选式的First集：\n'</span>            c_list = []            <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> self.Derivation.values():                <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:                    <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> c_list <span class="hljs-keyword">and</span> c != <span class="hljs-string">'ε'</span>:                        c_list.append(c)            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> c_list:                f = self.cFirst(c)                f = str(f).replace(<span class="hljs-string">'\''</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'['</span>, <span class="hljs-string">'&#123;'</span>).replace(<span class="hljs-string">']'</span>, <span class="hljs-string">'&#125;'</span>) + <span class="hljs-string">'\n'</span>                text += <span class="hljs-string">'First('</span> + str(c).replace(<span class="hljs-string">'\''</span>, <span class="hljs-string">''</span>) + <span class="hljs-string">'): '</span> + f            self.FirstSet.setText(text)            <span class="hljs-comment"># 统计能推出ε的符号</span>            self.FindE()            <span class="hljs-comment"># 建立Follow集</span>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> self.VN:  <span class="hljs-comment"># Follow集只考虑非终结符</span>                self.Follow[c] = []            self.FindFollow()            <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> self.Follow.keys():  <span class="hljs-comment"># 去重</span>                self.Follow[key] = list(set(self.Follow[key]))            <span class="hljs-comment"># 设置文本显示，将self.Follow（字典）转换为字符串，添加换行，去掉空格和单引号</span>            text = <span class="hljs-string">''</span>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> self.Follow.items():                <span class="hljs-comment"># 去掉引号，将list的[]换成集合的&#123;&#125;</span>                text += <span class="hljs-string">'Follow('</span> + str(item[<span class="hljs-number">0</span>]).replace(<span class="hljs-string">'\''</span>, <span class="hljs-string">''</span>) + <span class="hljs-string">'): '</span> \                        + str(item[<span class="hljs-number">1</span>]).replace(<span class="hljs-string">'\''</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'['</span>, <span class="hljs-string">'&#123;'</span>).replace(<span class="hljs-string">']'</span>, <span class="hljs-string">'&#125;'</span>) \                        + <span class="hljs-string">'\n'</span>            self.FollowSet.setText(text)            <span class="hljs-comment"># 构建分析表</span>            self.VT.append(<span class="hljs-string">'#'</span>)            self.LL1()            self.LR0()    <span class="hljs-comment"># 寻找非终结符c的First集</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindFirst</span><span class="hljs-params">(self, c)</span>:</span>        <span class="hljs-comment"># 终结符的First集为自己</span>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.VN:            self.First[c] = [c]            <span class="hljs-keyword">return</span> self.First[c]        <span class="hljs-comment"># 非终结符遍历其候选式的首字母：</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> self.Derivation[c]:                <span class="hljs-comment"># 终结符或ε直接加入左侧符号的First集中</span>                <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.VN:                    self.First[c].append(s[<span class="hljs-number">0</span>])                <span class="hljs-comment"># 非终结符</span>                <span class="hljs-keyword">else</span>:                    <span class="hljs-comment"># 将其First集加入左侧符号的First集中</span>                    <span class="hljs-keyword">if</span> c != s[<span class="hljs-number">0</span>]:                        extend = self.FindFirst(s[<span class="hljs-number">0</span>])                        <span class="hljs-comment"># 若开头的非终结符能推出ε但此候选式长度不为1，其First集中ε不会加入左侧符号的First集中</span>                        <span class="hljs-keyword">if</span> len(s) != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-string">'ε'</span> <span class="hljs-keyword">in</span> extend:                            extend.remove(<span class="hljs-string">'ε'</span>)                        self.First[c].extend(extend)                        <span class="hljs-comment"># 若开头的非终结符能推出ε，则将其下一个符号的First集加入左侧符号的First集中</span>                        <span class="hljs-keyword">if</span> <span class="hljs-string">'ε'</span> <span class="hljs-keyword">in</span> self.Derivation[s[<span class="hljs-number">0</span>]] <span class="hljs-keyword">and</span> len(s) != <span class="hljs-number">1</span>:                            extend = self.FindFirst(s[<span class="hljs-number">1</span>])                            self.First[c].extend(extend)            <span class="hljs-keyword">return</span> self.First[c]    <span class="hljs-comment"># 建立文法的Follow集</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindFollow</span><span class="hljs-params">(self)</span>:</span>        self.Follow[self.SymbolSet[<span class="hljs-number">0</span>]].append(<span class="hljs-string">'#'</span>)        <span class="hljs-comment"># while中的过程直至所有的Follow集不再增大</span>        isChange = <span class="hljs-literal">True</span>        <span class="hljs-keyword">while</span> isChange:            isChange = <span class="hljs-literal">False</span>            <span class="hljs-comment"># 遍历每一条推导式</span>            <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> self.Derivation.items():  <span class="hljs-comment"># 每条推导式</span>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(value)):  <span class="hljs-comment"># 每条候选式value[i]</span>                    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(value[i])):  <span class="hljs-comment"># 候选式中的每个符号value[i][j]</span>                        <span class="hljs-keyword">if</span> value[i][j] <span class="hljs-keyword">in</span> self.VN:  <span class="hljs-comment"># 只考虑非终结符</span>                            l = len(value[i])                            <span class="hljs-comment"># a-&gt;*b或a-&gt;*bc且c-&gt;ε，将Follow(a)加入Follow(b)</span>                            <span class="hljs-comment"># value[i][j]是结尾字符</span>                            <span class="hljs-keyword">if</span> j == l - <span class="hljs-number">1</span>:                                l_o = len(self.Follow[value[i][j]])  <span class="hljs-comment"># 原本的长度</span>                                self.Follow[value[i][j]].extend(self.Follow[key])  <span class="hljs-comment"># 将Follow(key)加入Follow(value[i][j])</span>                                self.Follow[value[i][j]] = list(set(self.Follow[value[i][j]]))  <span class="hljs-comment"># 去重</span>                                <span class="hljs-keyword">if</span> len(self.Follow[value[i][j]]) != l_o:  <span class="hljs-comment"># 检查是否发生变化</span>                                    isChange = <span class="hljs-literal">True</span>                            <span class="hljs-comment"># a-&gt;*bc且c-&gt;ε，将Follow(a)加入Follow(b)</span>                            <span class="hljs-comment"># value[i][j]是倒数第二个字符，且value[i][j+1]是非终结符</span>                            <span class="hljs-keyword">elif</span> (j == l - <span class="hljs-number">2</span>) <span class="hljs-keyword">and</span> (value[i][j + <span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> self.VN):                                l_o = len(self.Follow[value[i][j]])  <span class="hljs-comment"># 原本的长度</span>                                extend = self.First[value[i][j + <span class="hljs-number">1</span>]]                                <span class="hljs-keyword">if</span> <span class="hljs-string">'ε'</span> <span class="hljs-keyword">in</span> extend:                                    extend.remove(<span class="hljs-string">'ε'</span>)                                self.Follow[value[i][j]].extend(extend)  <span class="hljs-comment"># 将First(value[i][j+1])加入Follow(value[i][j])</span>                                self.Follow[value[i][j]] = list(set(self.Follow[value[i][j]]))  <span class="hljs-comment"># 去重</span>                                <span class="hljs-keyword">if</span> len(self.Follow[value[i][j]]) != l_o:  <span class="hljs-comment"># 检查是否发生变化</span>                                    isChange = <span class="hljs-literal">True</span>                                <span class="hljs-comment"># value[i][j+1]能推出ε</span>                                <span class="hljs-keyword">if</span> <span class="hljs-string">'ε'</span> <span class="hljs-keyword">in</span> self.Derivation[value[i][j + <span class="hljs-number">1</span>]]:                                    l_o = len(self.Follow[value[i][j]])  <span class="hljs-comment"># 原本的长度</span>                                    self.Follow[value[i][j]].extend(                                        self.Follow[key])  <span class="hljs-comment"># 将Follow(key)加入Follow(value[i][j])</span>                                    self.Follow[value[i][j]] = list(set(self.Follow[value[i][j]]))  <span class="hljs-comment"># 去重</span>                                    <span class="hljs-keyword">if</span> len(self.Follow[value[i][j]]) != l_o:  <span class="hljs-comment"># 检查是否发生变化</span>                                        isChange = <span class="hljs-literal">True</span>                            <span class="hljs-comment"># a-&gt;*bc*，将First(c)-&#123;ε&#125;加入Follow(b)</span>                            <span class="hljs-keyword">else</span>:                                l_o = len(self.Follow[value[i][j]])  <span class="hljs-comment"># 原本的长度</span>                                extend = self.First[value[i][j + <span class="hljs-number">1</span>]]                                <span class="hljs-keyword">if</span> <span class="hljs-string">'ε'</span> <span class="hljs-keyword">in</span> extend:                                    extend.remove(<span class="hljs-string">'ε'</span>)                                self.Follow[value[i][j]].extend(extend)  <span class="hljs-comment"># 将First(value[i][j+1])加入Follow(value[i][j])</span>                                self.Follow[value[i][j]] = list(set(self.Follow[value[i][j]]))  <span class="hljs-comment"># 去重</span>                                <span class="hljs-keyword">if</span> len(self.Follow[value[i][j]]) != l_o:  <span class="hljs-comment"># 检查是否发生变化</span>                                    isChange = <span class="hljs-literal">True</span>    <span class="hljs-comment"># 判断是否为LL(1)文法</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isLL1</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-comment"># 遍历每个推导式</span>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> self.Derivation.items():            <span class="hljs-comment"># 同一个符号的候选式至多只能有一个能推出ε</span>            cnt = <span class="hljs-number">0</span>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:                <span class="hljs-keyword">if</span> self.isE(c):                    cnt += <span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> cnt &gt; <span class="hljs-number">1</span>:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            c_e = []  <span class="hljs-comment"># 能推出ε的候选式</span>            c_none = []  <span class="hljs-comment"># 不能推出ε的候选式</span>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:                <span class="hljs-comment"># 存在左递归则不是LL(1)文法</span>                <span class="hljs-keyword">if</span> key == c[<span class="hljs-number">0</span>]:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>                <span class="hljs-comment"># 候选式按能否推出ε分类</span>                <span class="hljs-keyword">if</span> self.isE(c):                    c_e.append(c)                <span class="hljs-keyword">else</span>:                    c_none.append(c)            <span class="hljs-comment"># 对不能推出ε的候选式，两两First交集为空</span>            <span class="hljs-keyword">if</span> len(c_none) &gt; <span class="hljs-number">1</span>:  <span class="hljs-comment"># 至少得有两个候选式</span>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c_none:  <span class="hljs-comment"># 两两比较</span>                    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> c_none:                        <span class="hljs-keyword">if</span> i == j:  <span class="hljs-comment"># 不能自己跟自己比</span>                            <span class="hljs-keyword">continue</span>                        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> self.Derivation.values():  <span class="hljs-comment"># 要是同一个符号的候选式</span>                            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> v <span class="hljs-keyword">and</span> j <span class="hljs-keyword">in</span> v:                                i_first = set(self.cFirst(i))                                j_first = set(self.cFirst(j))                                <span class="hljs-keyword">if</span> i_first &amp; j_first == set():  <span class="hljs-comment"># 交集为空集</span>                                    <span class="hljs-keyword">continue</span>                                <span class="hljs-keyword">else</span>:                                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-comment"># 对能推出ε的候选式，First(候选式)与Follow(c)交集为空</span>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c_e:                i_first = set(self.cFirst(i))                key_first = set(self.Follow[key])                <span class="hljs-keyword">if</span> i_first &amp; key_first == set():  <span class="hljs-comment"># 交集为空集</span>                    <span class="hljs-keyword">continue</span>                <span class="hljs-keyword">else</span>:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <span class="hljs-comment"># 建立LL分析表</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LL1</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">if</span> self.isLL1():            <span class="hljs-comment"># 表头部分</span>            self.AnalyticalTable.setItem(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, QTableWidgetItem(<span class="hljs-string">'LL Parser'</span>))            self.AnalyticalTable.setSpan(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, len(self.VT) + <span class="hljs-number">1</span>)            column = <span class="hljs-number">1</span>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.VT:                <span class="hljs-keyword">if</span> i != <span class="hljs-string">'ε'</span>:                    self.AnalyticalTable.setItem(<span class="hljs-number">1</span>, column, QTableWidgetItem(i))                    column += <span class="hljs-number">1</span>            row = <span class="hljs-number">2</span>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.VN:                self.AnalyticalTable.setItem(row, <span class="hljs-number">0</span>, QTableWidgetItem(i))                row += <span class="hljs-number">1</span>            <span class="hljs-comment"># 坐标：</span>            <span class="hljs-comment"># 行：在self.VN中的坐标+2</span>            <span class="hljs-comment"># 列：在self.VT中的坐标+1</span>            <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> self.Derivation.items():                <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:                    c_first = self.cFirst(c)                    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> c_first:                        <span class="hljs-keyword">if</span> a != <span class="hljs-string">'ε'</span>:                            x = self.VN.index(key) + <span class="hljs-number">2</span>                            y = self.VT.index(a)                            <span class="hljs-keyword">if</span> <span class="hljs-string">'ε'</span> <span class="hljs-keyword">in</span> self.VT:                                <span class="hljs-keyword">if</span> y &lt; self.VT.index(<span class="hljs-string">'ε'</span>):                                    y += <span class="hljs-number">1</span>                            <span class="hljs-keyword">else</span>:                                y += <span class="hljs-number">1</span>                            content = QTableWidgetItem(key + <span class="hljs-string">'-&gt;'</span> + c)                            self.AnalyticalTable.setItem(x, y, content)                            <span class="hljs-keyword">if</span> <span class="hljs-string">'ε'</span> <span class="hljs-keyword">in</span> self.First[a]:                                <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> self.Follow[key]:                                    x = self.VN.index(key) + <span class="hljs-number">2</span>                                    y = self.VT.index(b) + <span class="hljs-number">1</span>                                    content = QTableWidgetItem(key + <span class="hljs-string">'-&gt;'</span> + c)                                    self.AnalyticalTable.setItem(x, y, content)        <span class="hljs-comment"># 不是LL(1)文法</span>        <span class="hljs-keyword">else</span>:            self.AnalyticalTable.setItem(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, QTableWidgetItem(<span class="hljs-string">'This is not a LL grammer.'</span>))            self.AnalyticalTable.setColumnWidth(<span class="hljs-number">0</span>, <span class="hljs-number">200</span>)    <span class="hljs-comment"># 建立LR分析表</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LR0</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-comment"># 建立状态集</span>        root = []        <span class="hljs-comment"># 每个结果不是ε的推导式，在候选式前加·，放进root</span>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> self.Derivation.items():            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:                root.append(key + <span class="hljs-string">'-&gt;·'</span> + c)        idx = <span class="hljs-number">0</span>        I0 = State(root, [], <span class="hljs-literal">True</span>, <span class="hljs-literal">None</span>, idx)        idx += <span class="hljs-number">1</span>        I = [I0]  <span class="hljs-comment"># 状态集</span>        isChange = <span class="hljs-literal">True</span>        <span class="hljs-keyword">while</span> isChange:            isChange = <span class="hljs-literal">False</span>            <span class="hljs-comment"># 查看每个状态集是否还能推导</span>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> I:                <span class="hljs-comment"># 检查next中的每个对象</span>                <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> i.next.items():                    <span class="hljs-comment"># 若value为列表，则要将其转换为State</span>                    <span class="hljs-keyword">if</span> type(value) == list <span class="hljs-keyword">and</span> value != []:                        isExist = <span class="hljs-literal">False</span>                        <span class="hljs-comment"># 若value对应的State已经存在于I中，则直接建立引用</span>                        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> I:                            value_new = []                            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:                                c = c.split(<span class="hljs-string">'·'</span>)                                c = c[<span class="hljs-number">0</span>] + c[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">'·'</span> + c[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>:]                                value_new.append(c)                            <span class="hljs-keyword">if</span> j.content == value_new:                                i.next[key] = j                                isExist = <span class="hljs-literal">True</span>                                isChange = <span class="hljs-literal">True</span>                                <span class="hljs-keyword">break</span>                        <span class="hljs-comment"># 若不存在，则建立新的State</span>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isExist:                            i.next[key] = State(root, value, <span class="hljs-literal">False</span>, i, idx)                            I.append(i.next[key])                            idx += <span class="hljs-number">1</span>                            isChange = <span class="hljs-literal">True</span>        I.insert(<span class="hljs-number">1</span>, State([], [], <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>))  <span class="hljs-comment"># 增广</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> I:            i.End()  <span class="hljs-comment"># 得到其中·在最后的式子的数量</span>        <span class="hljs-comment"># 表头部分</span>        row = len(self.VN) + <span class="hljs-number">6</span>        column = <span class="hljs-number">1</span>        self.AnalyticalTable.setItem(row - <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, QTableWidgetItem(<span class="hljs-string">'LR Parser'</span>))        self.AnalyticalTable.setSpan(row - <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, len(self.VT) + len(self.VN) + <span class="hljs-number">1</span>)        self.AnalyticalTable.setItem(row - <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, QTableWidgetItem(<span class="hljs-string">'Action'</span>))        self.AnalyticalTable.setSpan(row - <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, len(self.VT))        self.AnalyticalTable.setItem(row - <span class="hljs-number">2</span>, len(self.VT) + <span class="hljs-number">1</span>, QTableWidgetItem(<span class="hljs-string">'Goto'</span>))        self.AnalyticalTable.setSpan(row - <span class="hljs-number">2</span>, len(self.VT) + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, len(self.VN))        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.VT:            <span class="hljs-keyword">if</span> i != <span class="hljs-string">'ε'</span>:                self.AnalyticalTable.setItem(row - <span class="hljs-number">1</span>, column, QTableWidgetItem(i))                column += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.VN:            self.AnalyticalTable.setItem(row - <span class="hljs-number">1</span>, column+<span class="hljs-number">1</span>, QTableWidgetItem(i))            column += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(I)):            self.AnalyticalTable.setItem(row, <span class="hljs-number">0</span>, QTableWidgetItem(str(i)))            row += <span class="hljs-number">1</span>        <span class="hljs-comment"># 填表</span>        <span class="hljs-comment"># Ia通过key到Ib，则(a, key) = sb/b，取决于key是终结符还是非终结符</span>        <span class="hljs-comment"># key∈VT, key = self.VT.index(key)+1</span>        <span class="hljs-comment"># key∈VN, key = self.VN.index(key)+1+len(self.VT)</span>        <span class="hljs-comment"># 遍历I：</span>        <span class="hljs-comment"># 若其中只有一个推导式且·在末尾，则全填rx</span>        <span class="hljs-comment"># 若有多个推导式，一部位·在末尾，则这几个式子对应的格子填rx，key为从这个式子到终结态的key</span>        isLR = <span class="hljs-literal">True</span>        <span class="hljs-comment"># sb/b</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(I)):            <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> I[i].next.items():                <span class="hljs-keyword">if</span> value:  <span class="hljs-comment"># 每一对Ia-&gt;Ib</span>                    x = len(self.VN) + <span class="hljs-number">6</span> + i                    <span class="hljs-comment"># key为终结符，填sb</span>                    <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self.VT:                        y = self.VT.index(key) + <span class="hljs-number">1</span>                        source = <span class="hljs-string">'s'</span> + str(I.index(value))                        <span class="hljs-keyword">if</span> self.AnalyticalTable.item(x, y):                            isLR = <span class="hljs-literal">False</span>                        <span class="hljs-keyword">else</span>:                            self.AnalyticalTable.setItem(x, y, QTableWidgetItem(source))                    <span class="hljs-comment"># key为非终结符，填b</span>                    <span class="hljs-keyword">else</span>:                        y = self.VN.index(key) + <span class="hljs-number">1</span> + len(self.VT)                        source = str(I.index(value))                        <span class="hljs-keyword">if</span> self.AnalyticalTable.item(x, y):                            isLR = <span class="hljs-literal">False</span>                        <span class="hljs-keyword">else</span>:                            self.AnalyticalTable.setItem(x, y, QTableWidgetItem(source))        <span class="hljs-comment"># rb</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(I)):            x = len(self.VN) + <span class="hljs-number">6</span> + i            <span class="hljs-comment"># I[i]中只有一个式子且·在末尾，则在这一行的Action下全填rx，x为该式子在root对应式子的编号</span>            <span class="hljs-keyword">if</span> I[i].EndNum[<span class="hljs-string">'end'</span>] == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> I[i].EndNum[<span class="hljs-string">'all'</span>] == <span class="hljs-number">1</span>:                c = I[i].content[<span class="hljs-number">0</span>][:<span class="hljs-number">-1</span>].split(<span class="hljs-string">'-&gt;'</span>)                c = c[<span class="hljs-number">0</span>] + <span class="hljs-string">'-&gt;·'</span> + c[<span class="hljs-number">1</span>]                source = root.index(c) + <span class="hljs-number">1</span>                source = <span class="hljs-string">'r'</span> + str(source)                <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(self.VT)):                    <span class="hljs-keyword">if</span> self.AnalyticalTable.item(x, y):                        isLR = <span class="hljs-literal">False</span>                    <span class="hljs-keyword">else</span>:                        self.AnalyticalTable.setItem(x, y, QTableWidgetItem(source))            <span class="hljs-comment"># I[i]中一部分式子·在末尾，则在#列下填rx</span>            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> I[i].content:                    <span class="hljs-keyword">if</span> c[<span class="hljs-number">-1</span>] == <span class="hljs-string">'·'</span>:                        c = c[:<span class="hljs-number">-1</span>].split(<span class="hljs-string">'-&gt;'</span>)                        c = c[<span class="hljs-number">0</span>] + <span class="hljs-string">'-&gt;·'</span> + c[<span class="hljs-number">1</span>]                        source = root.index(c) + <span class="hljs-number">1</span>                        source = <span class="hljs-string">'r'</span> + str(source)                        y = len(self.VT)                        <span class="hljs-keyword">if</span> self.AnalyticalTable.item(x, y):                            isLR = <span class="hljs-literal">False</span>                        <span class="hljs-keyword">else</span>:                            self.AnalyticalTable.setItem(x, y, QTableWidgetItem(source))        self.AnalyticalTable.setItem(len(self.VN) + <span class="hljs-number">6</span> + <span class="hljs-number">1</span>, self.VT.index(<span class="hljs-string">'#'</span>) + <span class="hljs-number">1</span>, QTableWidgetItem(<span class="hljs-string">'acc'</span>))        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> self.Derivation.items():            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:                <span class="hljs-comment"># 存在左递归则不是LR文法</span>                <span class="hljs-keyword">if</span> key == c[<span class="hljs-number">0</span>]:                    isLR = <span class="hljs-literal">False</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isLR:            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(len(self.VN) + <span class="hljs-number">6</span>, len(self.VN) + <span class="hljs-number">7</span> + len(I)):                <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(self.VT) + len(self.VN) + <span class="hljs-number">1</span>):                    self.AnalyticalTable.setItem(x, y, QTableWidgetItem(<span class="hljs-string">''</span>))            self.AnalyticalTable.setItem(len(self.VN) + <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, QTableWidgetItem(<span class="hljs-string">'This is not a LR grammer.'</span>))    <span class="hljs-comment"># 判断候选式是否能推导出ε</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isE</span><span class="hljs-params">(self, c)</span>:</span>        <span class="hljs-keyword">if</span> c == <span class="hljs-string">'ε'</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>        <span class="hljs-comment"># 有终结符存在必不可能推导出ε</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> self.VT:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-comment"># 无终结符，则遍历每个符号，若全都能推出ε，则此候选式能推出ε</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> self.e_list:                <span class="hljs-keyword">continue</span>            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <span class="hljs-comment"># 建立ε集</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindE</span><span class="hljs-params">(self)</span>:</span>        isChange = <span class="hljs-literal">True</span>        <span class="hljs-keyword">while</span> isChange:            isChange = <span class="hljs-literal">False</span>            <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> self.Derivation.items():                <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> value:                    <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> self.e_list <span class="hljs-keyword">and</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.e_list:  <span class="hljs-comment"># 如果c可以推出ε，那key也可以</span>                        self.e_list.append(key)                        isChange = <span class="hljs-literal">True</span>    <span class="hljs-comment"># 求候选式的First集</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cFirst</span><span class="hljs-params">(self, c)</span>:</span>        <span class="hljs-comment"># 终结符开头，则其First集为这个终结符</span>        <span class="hljs-keyword">if</span> c[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> self.VT:            <span class="hljs-keyword">return</span> [c[<span class="hljs-number">0</span>]]        <span class="hljs-comment"># 非终结符，则返回其First集</span>        <span class="hljs-keyword">else</span>:            result = self.First[c[<span class="hljs-number">0</span>]]            <span class="hljs-comment"># 若c[0]能推出ε，则还要加上其后符号的First集</span>            <span class="hljs-keyword">if</span> <span class="hljs-string">'ε'</span> <span class="hljs-keyword">in</span> self.Derivation[c[<span class="hljs-number">0</span>]] <span class="hljs-keyword">and</span> len(c) != <span class="hljs-number">1</span>:                result.extend(self.First[c[<span class="hljs-number">1</span>]])            <span class="hljs-keyword">return</span> list(set(result))    <span class="hljs-comment"># 重置为初始状态</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Clear</span><span class="hljs-params">(self)</span>:</span>        self.InputArea.clear()        self.FirstSet.clear()        self.FollowSet.clear()        self.AnalyticalTable.clear()        self.AnalyticalTable.setColumnCount(<span class="hljs-number">0</span>)        self.AnalyticalTable.setRowCount(<span class="hljs-number">0</span>)        self.AnalyticalTable.setColumnCount(<span class="hljs-number">50</span>)        self.AnalyticalTable.setRowCount(<span class="hljs-number">50</span>)        self.SymbolSet = []  <span class="hljs-comment"># 符号集，保存每一个符号</span>        self.Derivation = &#123;&#125;  <span class="hljs-comment"># 推导式集，以字典形式保存，key为str型左侧非终结符，value为list型右侧候选式</span>        self.First = &#123;&#125;  <span class="hljs-comment"># First集</span>        self.Follow = &#123;&#125;  <span class="hljs-comment"># Follow集</span>        self.VT = []  <span class="hljs-comment"># 终结符集</span>        self.VN = []  <span class="hljs-comment"># 非终结符集</span>        self.e_list = [<span class="hljs-string">'ε'</span>]  <span class="hljs-comment"># 可推导出ε的符号集</span>        self.I = []  <span class="hljs-comment"># 状态集</span>    <span class="hljs-comment"># 帮助</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Help</span><span class="hljs-params">(self)</span>:</span>        os.startfile(<span class="hljs-string">'操作手册.docx'</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    app = QtWidgets.QApplication(sys.argv)    gui = QtWidgets.QMainWindow()    ui = Ui_MainWindow()    ui.setupUi(gui)    gui.show()    sys.exit(app.exec_())</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Qt</tag>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TF2]7. Custom Layer</title>
    <link href="/2020/7-TF2-Custom-Layer/"/>
    <url>/2020/7-TF2-Custom-Layer/</url>
    
    <content type="html"><![CDATA[<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfprint(tf.__version__)<span class="hljs-comment"># 2.1.1</span></code></pre></div><p>自定义层一般依赖于TensorFlow中的<code>tf.keras.layers.Layer</code>类，通过继承它并实现：</p><ul><li><code>__init__</code>: 进行所有与输入无关的初始化，定义需要的层</li><li><code>build</code>: 定义输入张量的格式并进行其余的初始化，可以放在<code>__init__</code>中完成</li><li><code>call</code>: 定义前向传播</li></ul><p>以iris数据集为例，构建一个全连接层。</p><p>首先加载数据：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasetsiris = datasets.load_iris()data = iris.datatarget = iris.targetprint(data.shape)print(target.shape)</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/12/7-1.png" srcset="/img/loading.gif" alt="DataShape"></p><p>对于一个线性层，其计算方式是 $y = xw + b$ 。对于iris数据集：$ x \in R^{(150, 4)} , w \in R^{(4, 1)} , b \in R^{(1)} , y \in R^{(150, 1)} $。</p><h1 id="1-自定义层的基本方法"><a href="#1-自定义层的基本方法" class="headerlink" title="1. 自定义层的基本方法"></a>1. 自定义层的基本方法</h1><h2 id="1-在-init-中使用Iitializer初始化参数"><a href="#1-在-init-中使用Iitializer初始化参数" class="headerlink" title="(1) 在__init__()中使用Iitializer初始化参数"></a>(1) 在<code>__init__()</code>中使用<code>Iitializer</code>初始化参数</h2><p><code>tf.keras.initializers.Initializer</code>类能够生成指定形状、格式、分布的Tensor。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Linear</span><span class="hljs-params">(tf.keras.layers.Layer)</span>:</span>    <span class="hljs-comment"># units为神经元个数，即每个神经元有一个input_dim*1的w</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, units=<span class="hljs-number">1</span>, input_dim=<span class="hljs-number">4</span>)</span>:</span>        super(Linear, self).__init__()        w_init = tf.random_normal_initializer()  <span class="hljs-comment"># 正态分布</span>        self.w = tf.Variable(            initial_value=w_init(shape=(input_dim, units), dtype=tf.float32),            trainable=<span class="hljs-literal">True</span>        )        b_init = tf.zeros_initializer()        self.b = tf.Variable(            initial_value=b_init(shape=(units,), dtype=tf.float32),  <span class="hljs-comment"># 每个神经元有一个偏置量b</span>            trainable=<span class="hljs-literal">True</span>        )    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        <span class="hljs-keyword">return</span> tf.matmul(inputs, self.w) + self.b  <span class="hljs-comment"># y=xw+b</span></code></pre></div><div class="hljs"><pre><code class="hljs Python">linear = Linear(units=<span class="hljs-number">1</span>, input_dim=<span class="hljs-number">4</span>)y = linear(data)print(y[:<span class="hljs-number">5</span>])  <span class="hljs-comment"># 查看前5个预测结果</span></code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/12/7-2.png" srcset="/img/loading.gif" alt="Custom1"></p><h2 id="2-在-init-中使用add-weight-初始化参数"><a href="#2-在-init-中使用add-weight-初始化参数" class="headerlink" title="(2) 在__init__()中使用add_weight()初始化参数"></a>(2) 在<code>__init__()</code>中使用<code>add_weight()</code>初始化参数</h2><p>方法基本与(1)相同，只是不需要使用单独的Initializer，而是直接在<code>add_weight()</code>的参数中指定。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Linear</span><span class="hljs-params">(tf.keras.layers.Layer)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, units=<span class="hljs-number">1</span>, input_dim=<span class="hljs-number">4</span>)</span>:</span>        super(Linear, self).__init__()        self.w = self.add_weight(            shape=(input_dim, units),            initializer=<span class="hljs-string">'random_normal'</span>,            trainable=<span class="hljs-literal">True</span>        )        self.b = self.add_weight(            shape=(units,),            initializer=<span class="hljs-string">'zeros'</span>,            trainable=<span class="hljs-literal">True</span>        )    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        <span class="hljs-keyword">return</span> tf.matmul(inputs, self.w) + self.b</code></pre></div><div class="hljs"><pre><code class="hljs Python">linear = Linear(units=<span class="hljs-number">1</span>, input_dim=<span class="hljs-number">4</span>)y = linear(data)print(y[:<span class="hljs-number">5</span>])</code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/12/7-3.png" srcset="/img/loading.gif" alt="Custom2"></p><h2 id="3-在build-中初始化参数"><a href="#3-在build-中初始化参数" class="headerlink" title="(3) 在build()中初始化参数"></a>(3) 在<code>build()</code>中初始化参数</h2><p>使用这种方法，就不需要再在实例化层时显式地指定输入维度，而是可以从输入中读取。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Linear</span><span class="hljs-params">(tf.keras.layers.Layer)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, units=<span class="hljs-number">1</span>)</span>:</span>        super(Linear, self).__init__()        self.units = units    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build</span><span class="hljs-params">(self, input_shape)</span>:</span>        self.w = self.add_weight(            shape=(input_shape[<span class="hljs-number">-1</span>], self.units),  <span class="hljs-comment"># 从输入中读取维度</span>            initializer=<span class="hljs-string">'random_normal'</span>,            trainable=<span class="hljs-literal">True</span>        )        self.b = self.add_weight(            shape=(self.units,),            initializer=<span class="hljs-string">'zeros'</span>,            trainable=<span class="hljs-literal">True</span>        )        super(Linear, self).build(input_shape)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        <span class="hljs-keyword">return</span> tf.matmul(inputs, self.w) + self.b</code></pre></div><div class="hljs"><pre><code class="hljs Python">linear = Linear(units=<span class="hljs-number">1</span>)y = linear(data)print(y[:<span class="hljs-number">5</span>])</code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/12/7-4.png" srcset="/img/loading.gif" alt="Custom3"></p><p>在定义层的参数时，可以通过设置参数的<code>trainable</code>属性来指定参数是否参与训练。通过<code>layer.weights</code> / <code>layer.trainable_weights</code> / <code>layer.non_trainable_weights</code>查看层中的各类参数。</p><h1 id="2-在模型中使用自定义层"><a href="#2-在模型中使用自定义层" class="headerlink" title="2. 在模型中使用自定义层"></a>2. 在模型中使用自定义层</h1><p>实际使用自定义层时，有以下注意事项：</p><p>(1) 在模型中使用自定义层时，若需要保存模型：</p><ul><li>需要在自定义层中重写<code>get_config()</code>方法，以便保存时能读取参数。</li><li>模型的参数需要命名（指定<code>name</code>参数）。</li><li>若加载模型时出现’Unknown layer’错误，需要在<code>load_model()</code>中指定参数<code>custom_object={&#39;层名&#39;: 层名}</code>。</li></ul><p>(2) 自定义层的名字不应与<code>tf.keras.layers</code>中的层同名。</p><p>(3) 在<code>__init__()</code>中添加可变参数<code>**kwargs</code>。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 准备数据</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasetsiris = datasets.load_iris()data = iris.datatarget = iris.target<span class="hljs-comment"># 打乱数据</span>concat = np.concatenate((data, target.reshape(<span class="hljs-number">150</span>, <span class="hljs-number">1</span>)), axis=<span class="hljs-number">-1</span>)  <span class="hljs-comment"># 绑定特征和对应标签</span>np.random.shuffle(concat)data = concat[:, :<span class="hljs-number">4</span>]  <span class="hljs-comment"># 前四列为特征</span>target = concat[:, <span class="hljs-number">-1</span>]  <span class="hljs-comment"># 最后一列为标签</span></code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 自定义层</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinear</span><span class="hljs-params">(tf.keras.layers.Layer)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, units=<span class="hljs-number">1</span>)</span>:</span>        super(MyLinear, self).__init__()        self.units = units    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build</span><span class="hljs-params">(self, input_shape)</span>:</span>        self.w = self.add_weight(            shape=(input_shape[<span class="hljs-number">-1</span>], self.units),            initializer=<span class="hljs-string">'random_normal'</span>,            trainable=<span class="hljs-literal">True</span>,            name=<span class="hljs-string">'w'</span>  <span class="hljs-comment"># 参数需指定name</span>        )        self.b = self.add_weight(            shape=(self.units,),            initializer=<span class="hljs-string">'zeros'</span>,            trainable=<span class="hljs-literal">True</span>,            name=<span class="hljs-string">'b'</span>        )        super(MyLinear, self).build(input_shape)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        <span class="hljs-keyword">return</span> tf.matmul(inputs, self.w) + self.b    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_config</span><span class="hljs-params">(self)</span>:</span>  <span class="hljs-comment"># 保存模型用</span>        config = super(MyLinear, self).get_config()        config.update(&#123;<span class="hljs-string">'units:'</span>: self.units&#125;)        <span class="hljs-keyword">return</span> config</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 训练模型</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes=<span class="hljs-number">3</span>)</span>:</span>        super(MyModel, self).__init__()        self.num_classes = num_classes        <span class="hljs-comment"># 使用自定义的层</span>        self.Dense1 = MyLinear(units=<span class="hljs-number">15</span>)        self.Dense2 = MyLinear(units=<span class="hljs-number">3</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        x = self.Dense1(inputs)        x = tf.nn.tanh(x)        x = self.Dense2(inputs)        x = tf.nn.softmax(x)        <span class="hljs-keyword">return</span> xmodel = MyModel(num_classes=<span class="hljs-number">3</span>)model.compile(    optimizer=tf.keras.optimizers.Adam(<span class="hljs-number">0.001</span>),    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),    metrics=[tf.keras.metrics.SparseCategoricalAccuracy()])model.fit(data, target, batch_size=<span class="hljs-number">15</span>, epochs=<span class="hljs-number">15</span>)</code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/12/7-5.png" srcset="/img/loading.gif" alt="Training"></p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 随机取几个样本预测结果</span>print(<span class="hljs-string">'预测结果：'</span>, model(data[:<span class="hljs-number">-1</span>:<span class="hljs-number">10</span>]).numpy().argmax(axis=<span class="hljs-number">1</span>))print(<span class="hljs-string">'正确结果：'</span>, target[:<span class="hljs-number">-1</span>:<span class="hljs-number">10</span>].astype(int))</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/12/7-6.png" srcset="/img/loading.gif" alt="Prediction"></p><div class="hljs"><pre><code class="hljs Python">model.summary()</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/12/7-7.png" srcset="/img/loading.gif" alt="Summary"></p><div class="hljs"><pre><code class="hljs Python">model.save(<span class="hljs-string">'model/MyLinear'</span>)</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/12/7-8.png" srcset="/img/loading.gif" alt="Saving"></p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 读取模型并预测</span>model_load = tf.keras.models.load_model(<span class="hljs-string">'model/MyLinear'</span>)model_load(data[:<span class="hljs-number">-1</span>:<span class="hljs-number">10</span>]).numpy().argmax(axis=<span class="hljs-number">1</span>)</code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/12/7-9.png" srcset="/img/loading.gif" alt="Load"></p>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TF2]6. Model Saving and Loading</title>
    <link href="/2020/6-TF2-Model-Saving-and-Loading/"/>
    <url>/2020/6-TF2-Model-Saving-and-Loading/</url>
    
    <content type="html"><![CDATA[<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfprint(tf.__version__)<span class="hljs-comment"># 2.1.1</span></code></pre></div><p>当一个模型创建、进行训练后，我们可以将其保存至本地，以便继续训练、快速重新使用、部署到别的平台等。</p><h1 id="1-Keras模型的保存与加载"><a href="#1-Keras模型的保存与加载" class="headerlink" title="1. Keras模型的保存与加载"></a>1. Keras模型的保存与加载</h1><p>首先定义一个Keras模型并训练：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npiris = datasets.load_iris()data = iris.datalabels = iris.targetdata = np.concatenate((data, labels.reshape(<span class="hljs-number">150</span>,<span class="hljs-number">1</span>)), axis=<span class="hljs-number">-1</span>)np.random.shuffle(data)X = data[:, :<span class="hljs-number">4</span>]  <span class="hljs-comment"># 前四列为特征</span>Y = data[:, <span class="hljs-number">-1</span>]  <span class="hljs-comment"># 最后一列为标签</span>print(X.shape)  <span class="hljs-comment"># 4个特征，150个样本</span>print(Y.shape)  <span class="hljs-comment"># 150个样本</span>print(np.unique(Y))  <span class="hljs-comment"># 3类</span></code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<span class="hljs-keyword">import</span> tensorflow.keras.layers <span class="hljs-keyword">as</span> layers<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes=<span class="hljs-number">3</span>)</span>:</span>        super(MyModel, self).__init__()        self.num_classes = num_classes        self.Dense1 = layers.Dense(<span class="hljs-number">32</span>, activation=<span class="hljs-string">'relu'</span>, input_shape=(<span class="hljs-number">4</span>,))        self.Dense2 = layers.Dense(<span class="hljs-number">3</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        x = self.Dense1(inputs)        x = self.Dense2(x)        <span class="hljs-keyword">return</span> xmodel = MyModel(num_classes=<span class="hljs-number">3</span>)model.compile(optimizer=tf.keras.optimizers.Adam(<span class="hljs-number">0.001</span>),              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),              metrics=[tf.keras.metrics.SparseCategoricalAccuracy()])</code></pre></div><div class="hljs"><pre><code class="hljs Python">model.fit(X, Y, batch_size=<span class="hljs-number">10</span>, epochs=<span class="hljs-number">20</span>, shuffle=<span class="hljs-literal">True</span>)</code></pre></div><div class="hljs"><pre><code class="hljs Python">model.summary()</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/11/6-9.png" srcset="/img/loading.gif" alt="ModelSummary"><br><div class="hljs"><pre><code class="hljs Python">print(model.predict(X[<span class="hljs-number">140</span>:]).argmax(axis=<span class="hljs-number">1</span>))print(Y[<span class="hljs-number">140</span>:])</code></pre></div><br><img src="https://wx1.sbimg.cn/2020/06/11/6-10.png" srcset="/img/loading.gif" alt="OriginalPrediction"></p><blockquote><p>若保存过程中发生OSError错误，先创建相应的文件夹再保存。</p></blockquote><h2 id="（1）-model-save-weights"><a href="#（1）-model-save-weights" class="headerlink" title="（1） model.save_weights()"></a>（1） <code>model.save_weights()</code></h2><p>这种方法仅保存了模型的权重，重新读取、使用依赖于原来的代码。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 保存权重</span>model.save_weights(<span class="hljs-string">'model/test/weight_saving/weight_saving.h5'</span>)<span class="hljs-comment"># 读取权重需要通过相同类的模型实例</span>model_load_1 = MyModel(num_classes=<span class="hljs-number">3</span>)model_load_1.compile(optimizer=tf.keras.optimizers.Adam(<span class="hljs-number">0.001</span>),              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),              metrics=[tf.keras.metrics.SparseCategoricalAccuracy()])model_load_1.fit(X, Y, epochs=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 建立层</span><span class="hljs-comment"># 读取权重</span>model_load_1.load_weights(<span class="hljs-string">'model/test/weight_saving/weight_saving.h5'</span>)print(model_load_1.predict(X[<span class="hljs-number">140</span>:]).argmax(axis=<span class="hljs-number">1</span>))print(Y[<span class="hljs-number">140</span>:])</code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/11/6-1.png" srcset="/img/loading.gif" alt="1-Prediction"></p><h2 id="2-model-save"><a href="#2-model-save" class="headerlink" title="(2) model.save()"></a>(2) <code>model.save()</code></h2><p><code>model.save()</code>能保存模型的完整信息（包括权重、优化器等模型配置），加载模型不依赖原来的代码。</p><p>参数<code>save_format</code>在tf 2.x中默认为<code>&#39;tf&#39;</code>，也可手动指定为<code>&#39;h5&#39;</code>，但是<strong>HDF5格式不应用于保存子类式的模型</strong>。<br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 保存整个模型</span>model.save(<span class="hljs-string">'model/test/model_saving/'</span>, save_format=<span class="hljs-string">'tf'</span>)<span class="hljs-comment"># save_format在tf2.x版本中默认为'tf'，也可选择'h5'</span><span class="hljs-comment"># model.save('./model/./model/test/model_saving.h5', save_format='h5')</span><span class="hljs-comment"># 读取模型，不需要先构建模型实例</span>model_load_2 = tf.keras.models.load_model(<span class="hljs-string">'model/test/model_saving/'</span>)print(model_load_2.predict(X[<span class="hljs-number">140</span>:]).argmax(axis=<span class="hljs-number">1</span>))print(Y[<span class="hljs-number">140</span>:])</code></pre></div><br><img src="https://wx2.sbimg.cn/2020/06/11/6-2.png" srcset="/img/loading.gif" alt="2-Prediction"></p><h2 id="3-tf-saved-model-save"><a href="#3-tf-saved-model-save" class="headerlink" title="(3) tf.saved_model.save()"></a>(3) <code>tf.saved_model.save()</code></h2><p><code>tf.saved_model.save()</code>保存的模型可以直接预测，但不保存优化器等配置，适用于部署的场景。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 保存没有优化器等配置的模型</span>tf.saved_model.save(model, <span class="hljs-string">'model/test/model_saving_noconf/'</span>)<span class="hljs-comment"># 读取不需要依赖已有实例，但是只能用于预测</span>model_load_3 = tf.saved_model.load(<span class="hljs-string">'model/test/model_saving_noconf/'</span>)<span class="hljs-comment"># 读取的模型不是keras模型，需要通过签名指定输入来得到预测结果</span>f = model_load_3.signatures[<span class="hljs-string">"serving_default"</span>]pred = f(input_1 = tf.constant(X[<span class="hljs-number">140</span>:].tolist()))print(pred)</code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/11/6-3.png" srcset="/img/loading.gif" alt="3-Load"><br><div class="hljs"><pre><code class="hljs Python">print(pred[<span class="hljs-string">'output_1'</span>].numpy().argmax(axis=<span class="hljs-number">1</span>))print(Y[<span class="hljs-number">140</span>:])</code></pre></div><br><img src="https://wx2.sbimg.cn/2020/06/11/6-4.png" srcset="/img/loading.gif" alt="3-Prediction"></p><h1 id="2-自定义模型的保存与加载"><a href="#2-自定义模型的保存与加载" class="headerlink" title="2. 自定义模型的保存与加载"></a>2. 自定义模型的保存与加载</h1><p>自定义模型保存时注意模型中<code>call()</code>函数需要用<code>@tf.function</code>修饰使其成为静态图。</p><p>保存、读取后的使用细节与Keras模型稍有不同。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Dense<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes=<span class="hljs-number">10</span>)</span>:</span>        super(MyModel, self).__init__()        self.num_classes = num_classes        self.dense1 = Dense(<span class="hljs-number">32</span>, activation=<span class="hljs-string">'relu'</span>)        self.dense2 = Dense(<span class="hljs-number">10</span>)    <span class="hljs-comment"># 修饰时指定输入形状和类型</span><span class="hljs-meta">    @tf.function(input_signature=[tf.TensorSpec(shape=[None, 32], dtype=tf.float32)])</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, x)</span>:</span>        x = self.dense1(x)        x = self.dense2(x)        <span class="hljs-keyword">return</span> xmodel = MyModel(num_classes=<span class="hljs-number">10</span>)<span class="hljs-comment"># 定义优化器、损失函数和评价指标</span>optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="hljs-number">0.001</span>)loss = tf.keras.losses.CategoricalCrossentropy()train_metric = tf.keras.metrics.CategoricalAccuracy()val_metric = tf.keras.metrics.CategoricalAccuracy()</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 准备数据</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npx_train = np.random.random((<span class="hljs-number">6400</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment"># 32个输入特征</span>y_train = np.random.random((<span class="hljs-number">6400</span>, <span class="hljs-number">10</span>))  <span class="hljs-comment"># 10个输出特征</span>train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="hljs-number">64</span>)x_val = np.random.random((<span class="hljs-number">640</span>, <span class="hljs-number">32</span>))y_val = np.random.random((<span class="hljs-number">640</span>, <span class="hljs-number">10</span>))val_dataset = tf.data.Dataset.from_tensor_slices((x_val, y_val)).batch(<span class="hljs-number">64</span>)</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 自定义训练</span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):  <span class="hljs-comment"># 5个epoch</span>    loss_epoch = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> step, (x_batch, y_batch) <span class="hljs-keyword">in</span> enumerate(train_dataset):  <span class="hljs-comment"># 遍历每个batch</span>        <span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> tape:  <span class="hljs-comment"># 使用GradientTape记录模型的前向传播以便求导</span>            prediction = model(x_batch, training=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 运行前向传播，得到预测值</span>            loss_value = loss(y_batch, prediction)  <span class="hljs-comment"># 计算损失</span>        grad = tape.gradient(loss_value, model.trainable_weights)  <span class="hljs-comment"># 得到梯度</span>        optimizer.apply_gradients(zip(grad, model.trainable_weights))  <span class="hljs-comment"># 优化器使用梯度更新权重参数</span>        loss_epoch += float(loss_value)        train_metric(y_batch, prediction)  <span class="hljs-comment"># 每个batch更新一次metric</span>    print(<span class="hljs-string">'Epoch &#123;&#125;/5: \nLoss=&#123;&#125;, Accuracy=&#123;&#125;'</span>.format(epoch + <span class="hljs-number">1</span>, loss_epoch / <span class="hljs-number">100</span>, float(train_metric.result())))    train_metric.reset_states()  <span class="hljs-comment"># 每个epoch结束后重置metric</span>    <span class="hljs-comment"># 在评价集上计算metric</span>    <span class="hljs-keyword">for</span> x_batch, y_vatch <span class="hljs-keyword">in</span> val_dataset:        validation = model(x_batch)        val_metric(y_vatch, validation)    print(<span class="hljs-string">'Accuracy on validation set: &#123;&#125;\n'</span>.format(float(val_metric.result())))    val_metric.reset_states()</code></pre></div><h2 id="（1）-model-save-weights-1"><a href="#（1）-model-save-weights-1" class="headerlink" title="（1） model.save_weights()"></a>（1） <code>model.save_weights()</code></h2><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 保存权重</span>model.save_weights(<span class="hljs-string">'model/test/weight_saving/weight_saving.h5'</span>)<span class="hljs-comment"># 读取权重需要通过相同类的模型实例</span>model_load_1 = MyModel(num_classes=<span class="hljs-number">3</span>)model_load_1.compile(optimizer=optimizer,              loss=loss,              metrics=[train_metric, val_metric])model_load_1.fit(x_train, y_train, epochs=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 建立层</span><span class="hljs-comment"># 读取权重</span>model_load_1.load_weights(<span class="hljs-string">'model/test/weight_saving/weight_saving.h5'</span>)print(model_load_1(x_val[:<span class="hljs-number">1</span>]))print(y_val[:<span class="hljs-number">1</span>])</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/11/6-5.png" srcset="/img/loading.gif" alt="1-Prediction"></p><h2 id="2-model-save-1"><a href="#2-model-save-1" class="headerlink" title="(2) model.save()"></a>(2) <code>model.save()</code></h2><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 保存整个模型</span>model._set_inputs(tf.TensorSpec(shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">32</span>], dtype=tf.float32))  <span class="hljs-comment"># 要首先指定输入格式，与call的装饰器中保持相同</span>model.save(<span class="hljs-string">'model/test/model_saving/'</span>, save_format=<span class="hljs-string">'tf'</span>)<span class="hljs-comment"># 读取模型，不需要先构建模型实例</span>model_load_2 = tf.keras.models.load_model(<span class="hljs-string">'model/test/model_saving/'</span>)print(model_load_1(x_val[:<span class="hljs-number">1</span>]))print(y_val[:<span class="hljs-number">1</span>])</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/11/6-6.png" srcset="/img/loading.gif" alt="2-Prediction"></p><h2 id="3-tf-saved-model-save-1"><a href="#3-tf-saved-model-save-1" class="headerlink" title="(3) tf.saved_model.save()"></a>(3) <code>tf.saved_model.save()</code></h2><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 保存没有优化器等配置的模型</span>tf.saved_model.save(model, <span class="hljs-string">'model/test/model_saving_noconf/'</span>)<span class="hljs-comment"># 读取不需要依赖已有实例，但是只能用于预测</span>model_load_3 = tf.saved_model.load(<span class="hljs-string">'model/test/model_saving_noconf/'</span>)<span class="hljs-comment"># 读取的模型不是keras模型，需要通过签名指定输入来得到预测结果</span>f = model_load_3.signatures[<span class="hljs-string">"serving_default"</span>]pred = f(args_0 = tf.constant(x_val[:<span class="hljs-number">1</span>].tolist()))print(pred)</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/11/6-7.png" srcset="/img/loading.gif" alt="3-Load"></p><div class="hljs"><pre><code class="hljs Python">print(pred[<span class="hljs-string">'output_1'</span>].numpy())print(y_val[:<span class="hljs-number">1</span>])</code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/11/6-8.png" srcset="/img/loading.gif" alt="3-Prediction"></p>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TF2]5. AutoGraph</title>
    <link href="/2020/5-TF2-Autograph/"/>
    <url>/2020/5-TF2-Autograph/</url>
    
    <content type="html"><![CDATA[<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfprint(tf.__version__)<span class="hljs-comment"># 2.1.1</span></code></pre></div><p>Tensorflow用计算图（Computional Graph）来表示计算逻辑。计算图一般有三种构建方式：</p><ul><li>静态图：首先创建图的结构，然后开启一个会话（Session），显式地执行图。这种方式编译器对网络的优化程度高，便于模型的复用。</li><li>动态图：按照代码的顺序执行。这种方式更利于调试和开发</li><li>AutoGraph：将动态图转换为静态图。</li></ul><h1 id="1-AutoGraph的机制原理与使用规范"><a href="#1-AutoGraph的机制原理与使用规范" class="headerlink" title="1. AutoGraph的机制原理与使用规范"></a>1. AutoGraph的机制原理与使用规范</h1><p>使用 <code>@tf.function</code> 修饰函数以使用AutoGraph，即将函数创建静态图。<br>AutoGraph使用中一般需要注意以下三点：</p><h2 id="1-优先使用TensorFlow中提供的函数"><a href="#1-优先使用TensorFlow中提供的函数" class="headerlink" title="(1) 优先使用TensorFlow中提供的函数"></a>(1) 优先使用TensorFlow中提供的函数</h2><p>在被 <code>@tf.function</code> 修饰的函数第一次执行时，会首先创建计算图，然后执行计算图。但是由于非TensorFlow的函数无法嵌入静态图，所以再次执行时可能会出现不同的结果。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 非TensorFlow的函数无法嵌入静态图的例子</span><span class="hljs-meta">@tf.function</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myadd</span><span class="hljs-params">(a, b)</span>:</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tf.range(<span class="hljs-number">3</span>):        tf.print(i)    c = a + b    print(<span class="hljs-string">'Python function'</span>)    <span class="hljs-keyword">return</span> c</code></pre></div><p>第一次执行时，TensorFlow中的函数被加入了静态图，而Python函数直接执行，没有加入静态图；图创建完成后被执行，只执行了TensorFlow中的函数。</p><div class="hljs"><pre><code class="hljs Python">myadd(tf.constant(<span class="hljs-string">'aaa'</span>), tf.constant(<span class="hljs-string">'bbb'</span>))  <span class="hljs-comment"># 第一次执行较慢</span></code></pre></div><p><img src="https://wx1.sbimg.cn/2020/06/10/5-1.png" srcset="/img/loading.gif" alt="AutoGraph-1"></p><p>再次执行时，只会执行创建完成的计算图，所以Python函数没有执行。<br><div class="hljs"><pre><code class="hljs Python">myadd(tf.constant(<span class="hljs-string">'aaa'</span>), tf.constant(<span class="hljs-string">'bbb'</span>))  <span class="hljs-comment"># 已创建的计算图执行很快</span></code></pre></div><br><img src="https://wx1.sbimg.cn/2020/06/10/5-2.png" srcset="/img/loading.gif" alt="AutoGraph-2"></p><p>如果传入不同类型的参数，则会创建新的静态图。<br><div class="hljs"><pre><code class="hljs Python">myadd(tf.constant(<span class="hljs-number">1</span>), tf.constant(<span class="hljs-number">3</span>))</code></pre></div><br><img src="https://wx1.sbimg.cn/2020/06/10/5-3.png" srcset="/img/loading.gif" alt="AutoGraph-3"></p><p>若不使用TensorFlow中的数据类型，则每次都会创建新的图。<br><div class="hljs"><pre><code class="hljs Python">myadd(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)myadd(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</code></pre></div><br><img src="https://wx1.sbimg.cn/2020/06/10/5-4.png" srcset="/img/loading.gif" alt="AutoGraph-4"></p><p>使用非TensorFlow函数还会导致一些其他的问题。<br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">@tf.function</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">np_random</span><span class="hljs-params">()</span>:</span>    a = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)    tf.print(a)<span class="hljs-meta">@tf.function</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tf_random</span><span class="hljs-params">()</span>:</span>    a = tf.random.normal((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>))    tf.print(a)<span class="hljs-comment"># 使用@tf.function将函数添加入静态图后，numpy中的随机函数每次都输出相同的结果</span>np_random()np_random()<span class="hljs-comment"># 使用tensorflow中的随机函数，运行正常</span>tf_random()tf_random()</code></pre></div><br><img src="https://wx1.sbimg.cn/2020/06/10/5-5.png" srcset="/img/loading.gif" alt="AutoGraph-Random"></p><h2 id="2-避免在被修饰的函数内部定义Variable"><a href="#2-避免在被修饰的函数内部定义Variable" class="headerlink" title="(2) 避免在被修饰的函数内部定义Variable"></a>(2) 避免在被修饰的函数内部定义Variable</h2><p>在动态图中,  <code>tf.Variable</code> 是一个普通的Python变量, 超出了其作用域范围就会被销毁；而在静态图中,  <code>tf.Variable</code> 则是计算图中一个持续存在的节点, 不受Python的作用域的影响。在转换成图的过程中， <code>tf.function</code> 可能会将一个函数执行多次，如果在函数内部有创建Variable的语句，就会因为多次创建相同的Variable而出错。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 正确的方式：在外部定义变量</span>x = tf.Variable(<span class="hljs-number">1</span>, dtype=tf.float32)<span class="hljs-meta">@tf.function</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer_var</span><span class="hljs-params">()</span>:</span>    x.assign_add(<span class="hljs-number">1</span>)    tf.print(x)    <span class="hljs-keyword">return</span> xouter_var()outer_var()</code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/10/5-6.png" srcset="/img/loading.gif" alt="Outer_Var"></p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 错误的方式：在内部定义变量</span><span class="hljs-meta">@tf.function</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner_var</span><span class="hljs-params">()</span>:</span>    x = tf.Variable(<span class="hljs-number">1</span>, dtype=tf.float32)    x.assign_add(<span class="hljs-number">1</span>)    tf.print(x)    <span class="hljs-keyword">return</span> xinner_var()inner_var()</code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/10/5-7.png" srcset="/img/loading.gif" alt="Inner_Var"></p><h2 id="3-被修饰的函数无法修改外部Python列表或字典等结构类型变量"><a href="#3-被修饰的函数无法修改外部Python列表或字典等结构类型变量" class="headerlink" title="(3) 被修饰的函数无法修改外部Python列表或字典等结构类型变量"></a>(3) 被修饰的函数无法修改外部Python列表或字典等结构类型变量</h2><p>与Python函数类似，列表、字典等Python内置的结构类型变量也无法嵌入计算图，因此无法被静态图修改。<br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 未被修饰的函数</span>tensor_list = []<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">append_tensor</span><span class="hljs-params">(x)</span>:</span>    tensor_list.append(x)    <span class="hljs-keyword">return</span> tensor_listappend_tensor(tf.constant(<span class="hljs-number">5.0</span>))append_tensor(tf.constant(<span class="hljs-number">6.0</span>))print(tensor_list)  <span class="hljs-comment"># 里面有两个tensor</span></code></pre></div><br><img src="https://wx2.sbimg.cn/2020/06/10/5-8.png" srcset="/img/loading.gif" alt="Undecorated"></p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 被修饰的函数</span>tensor_list = []<span class="hljs-meta">@tf.function</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">append_tensor</span><span class="hljs-params">(x)</span>:</span>    tensor_list.append(x)    <span class="hljs-keyword">return</span> tensor_listappend_tensor(tf.constant(<span class="hljs-number">5.0</span>))append_tensor(tf.constant(<span class="hljs-number">6.0</span>))print(tensor_list)  <span class="hljs-comment"># 里面只有一个空的tensor</span></code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/10/5-9.png" srcset="/img/loading.gif" alt="Decorated"></p><h1 id="2-AutoGraph的使用方法"><a href="#2-AutoGraph的使用方法" class="headerlink" title="2. AutoGraph的使用方法"></a>2. AutoGraph的使用方法</h1><p>不应该在被 <code>@tf.function</code> 修饰的函数内定义Variable，但是将其定义在函数之外又与封装的理念相违背。为了解决这个问题，一般通过继承 <code>tf.Module</code>  生成子类，将函数和变量都封装起来。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAdd</span><span class="hljs-params">(tf.Module)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, init_value=tf.constant<span class="hljs-params">(<span class="hljs-number">0.0</span>)</span>, name=None)</span>:</span>        super(MyAdd, self).__init__(name=name)        <span class="hljs-keyword">with</span> self.name_scope:            self.x = tf.Variable(init_value, dtype=tf.float32, trainable=<span class="hljs-literal">True</span>)<span class="hljs-meta">    @tf.function(input_signature=[tf.TensorSpec(shape=[], dtype=tf.float32)])</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addprint</span><span class="hljs-params">(self, a)</span>:</span>        <span class="hljs-keyword">with</span> self.name_scope:            self.x.assign_add(a)            tf.print(self.x)            <span class="hljs-keyword">return</span> self.x</code></pre></div><p><code>with self.name_scope</code> 相当于 <code>with tf.namescope(myadd)</code>，圈定了其中变量的所属范围（但是不影响变量的使用范围）。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 执行</span>add1 = MyAdd(init_value=tf.constant(<span class="hljs-number">1.0</span>))result = add1.addprint(tf.constant(<span class="hljs-number">2.0</span>))</code></pre></div><p><img src="https://wx2.sbimg.cn/2020/06/10/5-10.png" srcset="/img/loading.gif" alt="MyAdd"><br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 查看其中的所有变量</span>print(add1.variables)print(add1.trainable_variables)</code></pre></div><br><img src="https://wx1.sbimg.cn/2020/06/10/5-11.png" srcset="/img/loading.gif" alt="Variables"></p>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TF2]4. Custom Training Process</title>
    <link href="/2020/4-TF2-Custom-Training-Process/"/>
    <url>/2020/4-TF2-Custom-Training-Process/</url>
    
    <content type="html"><![CDATA[<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfprint(tf.__version__)<span class="hljs-comment"># 2.1.1</span></code></pre></div><h1 id="1-tf-GrandientTape"><a href="#1-tf-GrandientTape" class="headerlink" title="1. tf.GrandientTape"></a>1. tf.GrandientTape</h1><p><code>tf.GrandientTape()</code> 是一个上下文管理器，能够记录变量上的操作，以便进行求导等。</p><p>求 $ y=x^{3}+4x $ 中$ y $对$ x $的一、二阶导：<br><div class="hljs"><pre><code class="hljs Python">x = tf.constant(<span class="hljs-number">3.0</span>)<span class="hljs-comment"># 求导</span><span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> g2:  <span class="hljs-comment"># 二阶导数</span>    g2.watch(x)  <span class="hljs-comment"># 使g2追踪x</span>    <span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> g1:  <span class="hljs-comment"># 一阶导数</span>        g1.watch(x)        y = x * x * x + <span class="hljs-number">4</span> * x            dy_dx = g1.gradient(y, x)  <span class="hljs-comment"># 3 * x^2 + 4 = 31</span>    print(dy_dx)d2y_dx2 = g2.gradient(dy_dx, x)  <span class="hljs-comment"># 6 * x = 18</span>print(d2y_dx2)</code></pre></div><br><img src="https://wx1.sbimg.cn/2020/06/08/4-1.png" srcset="/img/loading.gif" alt="Gradient-1"></p><p>当 <code>GradientTape.gradient()</code> 方法被调用后，这个GradientTape对象就会被自动释放。如果需要多次调用这个方法（在同一个计算上多次求导），可以设置其参数 <code>persistent=True</code> ，在使用结束后手动删除它。</p><p>求 $y=x^{2}, z=y^{2}$ 中$ y $对$ x $、$ z $对$ x $的一阶导：<br><div class="hljs"><pre><code class="hljs Python">x = tf.constant(<span class="hljs-number">5.0</span>)<span class="hljs-keyword">with</span> tf.GradientTape(persistent=<span class="hljs-literal">True</span>) <span class="hljs-keyword">as</span> g:    g.watch(x)    y = x * x    z = y * ydy_dx = g.gradient(y, x)  <span class="hljs-comment"># 2 * x = 10</span>print(dy_dx)dz_dx = g.gradient(z, x)  <span class="hljs-comment"># 4 * x^3 = 500</span>print(dz_dx)<span class="hljs-keyword">del</span> g  <span class="hljs-comment"># 需要手动删除</span></code></pre></div><br><img src="https://wx2.sbimg.cn/2020/06/08/4-2.png" srcset="/img/loading.gif" alt="Gradient-2"></p><h1 id="2-自定义模型训练过程"><a href="#2-自定义模型训练过程" class="headerlink" title="2. 自定义模型训练过程"></a>2. 自定义模型训练过程</h1><p>模型的训练 <code>fit()</code> 是以下过程的循环：</p><ul><li>预测→计算损失→反向传播计算梯度→优化器使用梯度更新模型参数</li></ul><p>因此，使用GradientTape，可以方便地自定义训练过程。</p><p>首先构建模型，设置优化器、损失函数、评价指标，准备数据：<br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 构建模型（定义前向传播过程）</span><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Dense<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes=<span class="hljs-number">10</span>)</span>:</span>        super(MyModel, self).__init__()        self.num_classes = num_classes        self.dense1 = Dense(<span class="hljs-number">32</span>, activation=<span class="hljs-string">'relu'</span>)        self.dense2 = Dense(<span class="hljs-number">10</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, x)</span>:</span>        x = self.dense1(x)        x = self.dense2(x)        <span class="hljs-keyword">return</span> xmodel = MyModel(num_classes=<span class="hljs-number">10</span>)<span class="hljs-comment"># 定义优化器、损失函数和评价指标</span>optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="hljs-number">0.001</span>)loss = tf.keras.losses.CategoricalCrossentropy()train_metric = tf.keras.metrics.CategoricalAccuracy()val_metric = tf.keras.metrics.CategoricalAccuracy()<span class="hljs-comment"># 准备数据</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npx_train = np.random.random((<span class="hljs-number">6400</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment"># 32个输入特征</span>y_train = np.random.random((<span class="hljs-number">6400</span>, <span class="hljs-number">10</span>))  <span class="hljs-comment"># 10个输出特征</span>train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(<span class="hljs-number">64</span>)x_val = np.random.random((<span class="hljs-number">640</span>, <span class="hljs-number">32</span>))y_val = np.random.random((<span class="hljs-number">640</span>, <span class="hljs-number">10</span>))val_dataset = tf.data.Dataset.from_tensor_slices((x_val, y_val)).batch(<span class="hljs-number">64</span>)</code></pre></div></p><p>然后自定义训练过程，也就是手动执行 <code>fit()</code> 中的各个步骤：<br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 自定义训练</span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):  <span class="hljs-comment"># 5个epoch</span>    loss_epoch = <span class="hljs-number">0</span>  <span class="hljs-comment"># 整个epoch的平均loss</span>    <span class="hljs-keyword">for</span> step, (x_batch, y_batch) <span class="hljs-keyword">in</span> enumerate(train_dataset):  <span class="hljs-comment"># 遍历每个batch</span>        <span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> tape:  <span class="hljs-comment"># 使用GradientTape记录模型的前向传播以便求导</span>            prediction = model(x_batch, training=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 运行前向传播，得到预测值</span>            loss_value = loss(y_batch, prediction)  <span class="hljs-comment"># 计算损失</span>        grad = tape.gradient(loss_value, model.trainable_weights)  <span class="hljs-comment"># 得到梯度</span>        optimizer.apply_gradients(zip(grad, model.trainable_weights))  <span class="hljs-comment"># 优化器使用梯度更新权重参数</span>        loss_epoch += float(loss_value)        train_metric(y_batch, prediction)  <span class="hljs-comment"># 每个batch更新一次metric</span>    print(<span class="hljs-string">'Epoch &#123;&#125;/5: \nLoss=&#123;&#125;, Accuracy=&#123;&#125;'</span>.format(epoch + <span class="hljs-number">1</span>, loss_epoch / <span class="hljs-number">100</span>, float(train_metric.result())))    train_metric.reset_states()  <span class="hljs-comment"># 每个epoch结束后重置metric</span>    <span class="hljs-comment"># 在评价集上计算metric</span>    <span class="hljs-keyword">for</span> x_batch, y_vatch <span class="hljs-keyword">in</span> val_dataset:        validation = model(x_batch)        val_metric(y_vatch, validation)    print(<span class="hljs-string">'Accuracy on validation set: &#123;&#125;\n'</span>.format(float(val_metric.result())))    val_metric.reset_states()</code></pre></div><br><img src="https://wx2.sbimg.cn/2020/06/08/4-3.png" srcset="/img/loading.gif" alt="CustomTraining"></p><p>作为对比，使用 <code>fit()</code> 进行训练：<br><div class="hljs"><pre><code class="hljs Python">model = MyModel(num_classes=<span class="hljs-number">10</span>)model.compile(optimizer=optimizer, loss=loss, metrics=[<span class="hljs-string">'accuracy'</span>])model.fit(data, labels, batch_size=<span class="hljs-number">64</span>, epochs=<span class="hljs-number">5</span>)</code></pre></div></p><p><img src="https://wx2.sbimg.cn/2020/06/08/4-4.png" srcset="/img/loading.gif" alt="DefaultTraining"></p>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TF2]3. Keras Model Training</title>
    <link href="/2020/3-TF2-Keras-Model-Training/"/>
    <url>/2020/3-TF2-Keras-Model-Training/</url>
    
    <content type="html"><![CDATA[<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfprint(tf.__version__)<span class="hljs-comment"># 2.1.1</span></code></pre></div><p>这部分包括了使用 <code>tf.keras</code> 构建、训练模型的基本方法。</p><h1 id="1-基本模型训练流程"><a href="#1-基本模型训练流程" class="headerlink" title="1. 基本模型训练流程"></a>1. 基本模型训练流程</h1><p>模型训练的一般步骤包括：</p><ul><li>构建模型（三种方式）</li><li>训练模型：<code>model.fit()</code></li><li>验证模型：<code>model.evaluate()</code></li><li>使用模型进行预测：<code>model.predict()</code></li></ul><h2 id="1-1-构建模型"><a href="#1-1-构建模型" class="headerlink" title="1.1 构建模型"></a>1.1 构建模型</h2><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes=<span class="hljs-number">10</span>)</span>:</span>        super(MyModel, self).__init__()        self.num_classes = num_classes        self.Dense1 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>, input_shape=(<span class="hljs-number">32</span>,))  <span class="hljs-comment"># 输入维度32</span>        self.Dense2 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)        self.Dense3 = layers.Dense(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 输出为10类</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, x)</span>:</span>        x = self.Dense1(x)        x = self.Dense2(x)        x = self.Dense3(x)        <span class="hljs-keyword">return</span> xmodel = MyModel(num_classes=<span class="hljs-number">10</span>)model.compile(    optimizer=tf.keras.optimizers.Adam(<span class="hljs-number">0.001</span>),    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),    metrics=[<span class="hljs-string">'accuracy'</span>])</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 构建数据集</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npx_train = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment"># 32个特征，1000个样本</span>y_train = np.random.randint(<span class="hljs-number">10</span>, size=(<span class="hljs-number">1000</span>, ))  <span class="hljs-comment"># 10个分类</span>x_val = np.random.random((<span class="hljs-number">200</span>, <span class="hljs-number">32</span>))y_val = np.random.randint(<span class="hljs-number">10</span>, size=(<span class="hljs-number">200</span>, ))x_test = np.random.random((<span class="hljs-number">200</span>, <span class="hljs-number">32</span>))y_test = np.random.randint(<span class="hljs-number">10</span>, size=(<span class="hljs-number">200</span>, ))</code></pre></div><h2 id="1-2-训练模型"><a href="#1-2-训练模型" class="headerlink" title="1.2 训练模型"></a>1.2 训练模型</h2><p><code>model.fit()</code>中的基本参数：</p><ul><li>x、y：输入数据和目标数据。</li><li>batch_size：样本分组的大小，即每训练batch_size个样本，模型更新一次权重参数。</li><li>epochs：训练的轮数。</li></ul><p>这里还使用了验证集：<br><div class="hljs"><pre><code class="hljs Python">model.fit(x_train, y_train, batch_size=<span class="hljs-number">100</span>, epochs=<span class="hljs-number">5</span>, validation_data=(x_val, y_val))</code></pre></div></p><h2 id="1-3-模型验证和预测"><a href="#1-3-模型验证和预测" class="headerlink" title="1.3 模型验证和预测"></a>1.3 模型验证和预测</h2><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 在测试集上验证模型</span>results = model.evaluate(x_test, y_test, batch_size=<span class="hljs-number">128</span>)</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 对x_test的前三个样本进行预测</span>predictions = model.predict(x_test[:<span class="hljs-number">3</span>])print(y_test[:<span class="hljs-number">3</span>], predictions.argmax(axis=<span class="hljs-number">1</span>))  <span class="hljs-comment"># 分类的预测输出为10个分类的概率，这里取每行最大值的索引（即对应分类）</span></code></pre></div><h1 id="2-使用类别加权和样本加权"><a href="#2-使用类别加权和样本加权" class="headerlink" title="2. 使用类别加权和样本加权"></a>2. 使用类别加权和样本加权</h1><h2 id="2-1-类别加权"><a href="#2-1-类别加权" class="headerlink" title="2.1 类别加权"></a>2.1 类别加权</h2><p><code>model.fit()</code>函数中包含参数<strong>class_weight</strong>，可以通过字典形式指定每个<strong>特征</strong>的权重。注意，该字典必须包含输入的<strong>全部特征</strong>，即字典长度等于输入的列数。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 权重字典，使模型更重视5</span>class_weight = &#123;&#125;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):    class_weight[i] = <span class="hljs-number">1</span>class_weight[<span class="hljs-number">5</span>] = <span class="hljs-number">2</span><span class="hljs-comment"># 传入权重参数进行训练</span>model.fit(x_train, y_train, batch_size=<span class="hljs-number">100</span>, epochs=<span class="hljs-number">5</span>, validation_data=(x_val, y_val), class_weight=class_weight)</code></pre></div><h2 id="2-2-样本加权"><a href="#2-2-样本加权" class="headerlink" title="2.2 样本加权"></a>2.2 样本加权</h2><p><code>model.fit()</code>函数中包含参数<strong>sample_weight</strong>，可以通过数组形式指定每个<strong>样本</strong>的权重。数组长度应等于输入的行数。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 权重列表，使模型更重视5</span>sample_weight = np.ones(shape=(len(y_train),))  <span class="hljs-comment"># 所有样本权重为1</span>sample_weight[y_train == <span class="hljs-number">5</span>] = <span class="hljs-number">2</span>  <span class="hljs-comment"># 5的权重为2</span><span class="hljs-comment"># 传入权重参数进行训练</span>model.fit(x_train, y_train, batch_size=<span class="hljs-number">100</span>, epochs=<span class="hljs-number">5</span>, validation_data=(x_val, y_val), sample_weight=sample_weight)</code></pre></div><h1 id="3-使用回调函数"><a href="#3-使用回调函数" class="headerlink" title="3. 使用回调函数"></a>3. 使用回调函数</h1><p>回调函数（Callback Function）是模型在训练中的特定时刻被调用的对象。</p><p>可以以列表的方式将需要使用的回调函数实例化后传入<code>model.fit()</code>的callbacks参数。</p><p>这里主要介绍三个回调函数。</p><h2 id="3-1-EarlyStopping-早停"><a href="#3-1-EarlyStopping-早停" class="headerlink" title="3.1 EarlyStopping(早停)"></a>3.1 EarlyStopping(早停)</h2><p>当被监视的指标不再改善时自动停止训练。一般需要指定的参数：</p><ul><li>monitor：监视的指标。</li><li>min_delta：变化量小于它即认为“不再改善”。</li><li>patience：容忍“不再改善”的次数。</li><li>mode：在’auto’、’min’、’max’中选择。’min’意为当指标不再下降时停止训练，’max’反之。</li></ul><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 设置回调函数</span>callbacks = [    tf.keras.callbacks.EarlyStopping(        monitor=<span class="hljs-string">'val_loss'</span>,  <span class="hljs-comment"># 监视val_loss</span>        min_delta=<span class="hljs-number">0.005</span>,  <span class="hljs-comment"># 变化小于0.005即认为没有改善</span>        patience=<span class="hljs-number">3</span>,  <span class="hljs-comment"># 没有改善的情况连续出现3次则停止训练</span>        verbose=<span class="hljs-number">2</span>    )]<span class="hljs-comment">#　使用回调函数进行训练</span>model.fit(x_train, y_train, batch_size=<span class="hljs-number">100</span>, epochs=<span class="hljs-number">100</span>, validation_data=(x_val, y_val), callbacks=callbacks)</code></pre></div><p>可以看到，虽然设置了100个epoch，但是由于连续3次val_loss变化小于0.005，训练自动停止。<br><img src="https://wx1.sbimg.cn/2020/06/07/3-1.png" srcset="/img/loading.gif" alt="EarlyStopping"></p><h2 id="3-2-ModelCheckpoint-定期自动保存模型"><a href="#3-2-ModelCheckpoint-定期自动保存模型" class="headerlink" title="3.2 ModelCheckpoint(定期自动保存模型)"></a>3.2 ModelCheckpoint(定期自动保存模型)</h2><p>在指定的时间点保存模型。一般需要指定的参数：</p><ul><li>filepath：保存路径，可以使用’{epoch}’等使每次保存的文件名不同。</li><li>monitor：监视的指标。</li><li>save_best_only：设置为True时，保存时若当前次的指标更好，会覆盖之前保存的模型。</li><li>save_weights_only：设置为True是仅保存模型的权重参数，而非整个模型。</li><li>save_freq：保存频率。一般设置为’epoch’，即每个epoch后保存；也可设置为整数，表示每训练一定数量的样本，就会在当前batch结束后保存。官方文档指出后者可能更不可靠。</li></ul><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 设置回调函数</span>callbacks = [    tf.keras.callbacks.ModelCheckpoint(        filepath=<span class="hljs-string">'./checkpoints/MyModel_Checkpoint_&#123;epoch&#125;'</span>,  <span class="hljs-comment"># 每个epoch对应的独立的文件</span>        monitor=<span class="hljs-string">'val_loss'</span>,        save_best_only=<span class="hljs-literal">True</span>,  <span class="hljs-comment"># 只有当评价指标改进时保存</span>        save_weights_only=<span class="hljs-literal">False</span>,  <span class="hljs-comment"># 保存整个模型</span>        verbose=<span class="hljs-number">1</span>    )]<span class="hljs-comment">#　使用回调函数进行训练</span>model.fit(x_train, y_train, batch_size=<span class="hljs-number">100</span>, epochs=<span class="hljs-number">3</span>, validation_data=(x_val, y_val), callbacks=callbacks)</code></pre></div><p>由于设置了<code>verbose=1</code>，每次保存的信息都在训练过程中输出：<br><img src="https://wx2.sbimg.cn/2020/06/07/3-2.png" srcset="/img/loading.gif" alt="ModelCheckpoint"></p><h2 id="3-3-ReduceLROnPlateau-动态调整学习率"><a href="#3-3-ReduceLROnPlateau-动态调整学习率" class="headerlink" title="3.3 ReduceLROnPlateau(动态调整学习率)"></a>3.3 ReduceLROnPlateau(动态调整学习率)</h2><p>当模型不再改善时自动减小学习率。一般需要指定的参数：</p><ul><li>monitor: 监视的指标。</li><li>factor: new_lr = lr * factor。</li><li>patience: 容忍“不再改善”的次数。</li><li>mode: 在’auto’、’min’、’max’中选择。’min’意为当指标不再下降时修改学习率，’max’反之。</li><li>min_delta: 变化量小于它即认为“不再改善”。</li><li>cooldown：每次执行调整后，到下一次开始计算patience的间隔。</li><li>min_lr: 学习率的最小值。</li></ul><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 设置回调函数</span>callbacks = [    tf.keras.callbacks.ReduceLROnPlateau(        monitor=<span class="hljs-string">'val_loss'</span>,        factor=<span class="hljs-number">0.5</span>,        patience=<span class="hljs-number">3</span>,        mode=<span class="hljs-string">'max'</span>,        verbose=<span class="hljs-number">1</span>    )]<span class="hljs-comment">#　使用回调函数进行训练</span>model.fit(x_train, y_train, batch_size=<span class="hljs-number">100</span>, epochs=<span class="hljs-number">20</span>, validation_data=(x_val, y_val), callbacks=callbacks)</code></pre></div><p>当未改善次数达到3次时将学习率调整为原来的0.5倍：<br><img src="https://wx1.sbimg.cn/2020/06/07/3-3.png" srcset="/img/loading.gif" alt="ReduceLROnPlateau"></p><h1 id="4-构建多输入、多输出模型"><a href="#4-构建多输入、多输出模型" class="headerlink" title="4. 构建多输入、多输出模型"></a>4. 构建多输入、多输出模型</h1><p>尝试构建一个具有2个输入、2个输出的模型。</p><p>输入：</p><ul><li>(32, 32, 3)：32×32的三通道图像。</li><li>(20, 10)：20个时间戳，10个特征。</li></ul><p>输出：</p><ul><li>(1,)：得分。</li><li>(5,)：分类。</li></ul><p>构建模型中损失函数和评价指标均可以以列表形式传入。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 构建模型</span><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>        super(MyModel, self).__init__()        <span class="hljs-comment"># 处理图像</span>        self.conv1 = layers.Conv2D(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)        self.pool1 = layers.GlobalMaxPooling2D()           <span class="hljs-comment"># 处理时间序列</span>        self.conv2 = layers.Conv1D(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)        self.pool2 = layers.GlobalMaxPooling1D()        <span class="hljs-comment"># 全连接层</span>        self.dense1 = layers.Dense(<span class="hljs-number">1</span>, name=<span class="hljs-string">'score_output'</span>)        self.dense2 = layers.Dense(<span class="hljs-number">5</span>, name=<span class="hljs-string">'class_output'</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        x1 = self.conv1(inputs[<span class="hljs-number">0</span>])        x1 = self.pool1(x1)        x2 = self.conv2(inputs[<span class="hljs-number">1</span>])        x2 = self.pool2(x2)        x = layers.concatenate([x1, x2])        score_output = self.dense1(x)        class_output = self.dense2(x)        <span class="hljs-keyword">return</span> score_output, class_outputmodel = MyModel()model.compile(    optimizer=tf.keras.optimizers.RMSprop(<span class="hljs-number">1e-3</span>),    <span class="hljs-comment"># 使用多个损失函数并命名</span>    loss=[        tf.keras.losses.MeanSquaredError(),        tf.keras.losses.CategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>)    ],    <span class="hljs-comment"># 指定损失函数的权重</span>    loss_weights=[<span class="hljs-number">2.</span>, <span class="hljs-number">1.</span>],    <span class="hljs-comment"># 使用多个评价指标并命名</span>    metrics=[        [            tf.keras.metrics.MeanAbsolutePercentageError(),            tf.keras.metrics.MeanAbsoluteError()        ],        [            tf.keras.metrics.CategoricalAccuracy()        ]    ])</code></pre></div><p>这个模型的可视化参考如下，注意<code>tf.keras.utils.plot_model()</code>方法无法对子类化模型使用。<br><img src="https://wx1.sbimg.cn/2020/06/07/3-4.png" srcset="/img/loading.gif" alt="Plot"></p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 生成数据</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npimg_data = np.random.random_sample(size=(<span class="hljs-number">500</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>))ts_data = np.random.random_sample(size=(<span class="hljs-number">500</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>))score_targets = np.random.random_sample(size=(<span class="hljs-number">500</span>, <span class="hljs-number">1</span>))class_targets = np.random.random_sample(size=(<span class="hljs-number">500</span>, <span class="hljs-number">5</span>))</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 训练</span>model.fit(    [img_data, ts_data],  <span class="hljs-comment"># 多输入</span>    [score_targets, class_targets],  <span class="hljs-comment"># 多输出</span>    batch_size=<span class="hljs-number">50</span>,    epochs=<span class="hljs-number">5</span>)</code></pre></div><p>训练结果：<br><img src="https://wx1.sbimg.cn/2020/06/07/3-5.png" srcset="/img/loading.gif" alt="Training"></p>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TF2]2. Tensor and Basic Modeling</title>
    <link href="/2020/2-TF2-Tensor-and-Basic-Modeling/"/>
    <url>/2020/2-TF2-Tensor-and-Basic-Modeling/</url>
    
    <content type="html"><![CDATA[<p>首先导入tensorflow，查看版本和设备信息：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tfprint(tf.__version__)<span class="hljs-comment"># 2.1.1</span></code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># print(tf.test.is_gpu_available())  # Not recommended, use following instead</span>print(tf.config.list_physical_devices(<span class="hljs-string">'GPU'</span>))</code></pre></div><h1 id="1-张量与操作"><a href="#1-张量与操作" class="headerlink" title="1. 张量与操作"></a>1. 张量与操作</h1><p>tensorflow中有两种表示变量的方式：tf.Variable和tf.Tensor。Variale在Tensor基础上有一些额外的功能，通常用于单独的数据操作；Tensor则通常用于保存计算的中间结果。</p><p>使用Python自带的数据格式创建Variable：<br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># rank意为变量的维度</span>r0 = tf.Variable(<span class="hljs-string">'rank0'</span>, tf.string)print(r0, <span class="hljs-string">'\nrank: '</span>, tf.rank(r0), <span class="hljs-string">'  shape: '</span>, tf.shape(r0), <span class="hljs-string">'\n'</span>)  <span class="hljs-comment"># rank=1, shape=(1,)</span>r2 = tf.Variable([[<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>]], tf.int16)  <span class="hljs-comment"># rank=2, shape=(2,)</span>print(r2, <span class="hljs-string">'\nrank: '</span>, tf.rank(r2), <span class="hljs-string">'  shape: '</span>, tf.shape(r2), <span class="hljs-string">'\n'</span>)</code></pre></div></p><p>创建特殊矩阵、变型等方法类似于numpy：<br><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># create tensor</span>tf.constant([[<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>]], tf.int16)tf.zeros((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), tf.float16)<span class="hljs-comment"># print(tf.dtypes.cast(x, tf.int16))  # 改变格式</span></code></pre></div></p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># reshape</span>t = tf.ones((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), tf.int16)print(tf.reshape(t, (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)))</code></pre></div><p>Numpy与TensorFlow的一些函数对比:</p><div class="table-container"><table><thead><tr><th style="text-align:left">Numpy</th><th style="text-align:left">TensorFlow</th></tr></thead><tbody><tr><td style="text-align:left">a = np.zeros((2, 3))</td><td style="text-align:left">b = tf.zeros((2, 3))</td></tr><tr><td style="text-align:left">np.sum(a, axis=1)</td><td style="text-align:left">b = tf.reduce_sum(b, axis=1)</td></tr><tr><td style="text-align:left">a.shape</td><td style="text-align:left">b.get_shape()</td></tr><tr><td style="text-align:left">np.reshape(a, (3, 2))</td><td style="text-align:left">tf.reshape(b, (3, 2))</td></tr><tr><td style="text-align:left">a * 5 + 1</td><td style="text-align:left">b * 5 + 1</td></tr><tr><td style="text-align:left">np.dot(a, x)</td><td style="text-align:left">tf.matmul(b, x)</td></tr><tr><td style="text-align:left">a[0, 0]; a[:, 0]; a[0, :]</td><td style="text-align:left">b[0, 0]; b[:, 0]; b[0, :]</td></tr></tbody></table></div><p>常用的一些tensor操作包：</p><ul><li>tf.strings</li><li>tf.debugging</li><li>tf.dtypes</li><li>tf.math</li><li>tf.random</li><li>tf.feature_column</li></ul><h1 id="2-常用层"><a href="#2-常用层" class="headerlink" title="2. 常用层"></a>2. 常用层</h1><ul><li>tf.keras.layers：基于tf.nn高度封装的各种层</li><li>tf.nn：底层的函数库</li></ul><p>一些建立、配置层的基本操作：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 数据</span>a = tf.random.uniform((<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>), minval=<span class="hljs-number">-0.5</span>, maxval=<span class="hljs-number">0.5</span>)<span class="hljs-comment"># 实例化层对象</span>x = tf.keras.layers.LSTM(<span class="hljs-number">100</span>)(a)<span class="hljs-comment"># 在层中添加激活函数</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)tf.keras.layers.Dense(<span class="hljs-number">64</span>, activation=tf.nn.relu)<span class="hljs-comment"># L1正则化应用于内核矩阵</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, kernel_regularizer=tf.keras.regularizers.l1(<span class="hljs-number">0.01</span>))<span class="hljs-comment"># L2正则化应用于偏差函数</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, bias_regularizer=tf.keras.regularizers.l2(<span class="hljs-number">0.01</span>))<span class="hljs-comment"># 内核初始化为随机正交矩阵</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, kernel_initializer=<span class="hljs-string">'orthogonal'</span>)<span class="hljs-comment"># 偏差向量初始化为2.0</span>tf.keras.layers.Dense(<span class="hljs-number">64</span>, bias_initializer=tf.keras.initializers.Constant(<span class="hljs-number">2.0</span>))</code></pre></div><h1 id="3-三种建模方式"><a href="#3-三种建模方式" class="headerlink" title="3. 三种建模方式"></a>3. 三种建模方式</h1><p>tensorflow中有三种主要的建模方式，分别为顺序式、函数式和子类式。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers</code></pre></div><h2 id="1-Sequential-Model-顺序模型"><a href="#1-Sequential-Model-顺序模型" class="headerlink" title="(1) Sequential Model (顺序模型)"></a>(1) Sequential Model (顺序模型)</h2><p>顺序模型使用 tf.keras.Sequential ，适用于建立较为简单的、数据流向单一的模型。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 第一种方式：逐层添加</span>model = tf.keras.Sequential()model.add(layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>))model.add(layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>))model.add(layers.Dense(<span class="hljs-number">10</span>))</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 第二种方式：使用list传入</span>model = tf.keras.Sequential([    layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>, input_shape=(<span class="hljs-number">32</span>,)),    layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>),    layers.Dense(<span class="hljs-number">10</span>)])</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 配置模型训练用的参数</span>model.compile(    optimizer=tf.keras.optimizers.Adam(<span class="hljs-number">0.01</span>),    loss=tf.keras.losses.CategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),    metrics=[<span class="hljs-string">'accuracy'</span>])<span class="hljs-comment"># 训练</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npdata = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))labels = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))model.fit(data, labels, epochs=<span class="hljs-number">10</span>, batch_size=<span class="hljs-number">10</span>)</code></pre></div><h2 id="2-Functional-Model-函数模型"><a href="#2-Functional-Model-函数模型" class="headerlink" title="(2) Functional Model (函数模型)"></a>(2) Functional Model (函数模型)</h2><ul><li>多输入/多输出模型</li><li>具有共享图层的模型</li><li>具有非顺序数据流的模型</li></ul><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 输入，可以有多个</span>input1 = tf.keras.Input(shape=(<span class="hljs-number">32</span>,))input2 = tf.keras.Input(shape=(<span class="hljs-number">32</span>,))<span class="hljs-comment"># 层，各输入可以经过不同的层</span>x1 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)(input1)x2 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)(input2)x = tf.concat((x1, x2), axis=<span class="hljs-number">-1</span>)x = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)(x)<span class="hljs-comment"># 输出</span>pred = layers.Dense(<span class="hljs-number">10</span>)(x)</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 配置模型</span>model = tf.keras.Model(inputs=(input1, input2), outputs=pred)model.compile(    optimizer=tf.keras.optimizers.RMSprop(<span class="hljs-number">0.001</span>),    loss=tf.keras.losses.CategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),    metrics=[<span class="hljs-string">'accuracy'</span>])<span class="hljs-comment"># 生成数据，这里有两个输入</span>data1 = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))data2 = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))labels = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<span class="hljs-comment"># 训练</span>model.fit((data1, data2), labels, epochs=<span class="hljs-number">10</span>, batch_size=<span class="hljs-number">10</span>)</code></pre></div><h2 id="3-Subclassing-Model-子类化模型"><a href="#3-Subclassing-Model-子类化模型" class="headerlink" title="(3) Subclassing Model (子类化模型)"></a>(3) Subclassing Model (子类化模型)</h2><p>继承tf.keras.Model，高度可定制化。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 定义模型</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes=<span class="hljs-number">10</span>)</span>:</span>        super(MyModel, self).__init__(name=<span class="hljs-string">'my_model'</span>)        self.num_classes = num_classes        <span class="hljs-comment"># 定义模型中的层</span>        self.dense_1 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)        self.dense_2 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)        self.dense_3 = layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)        self.dense_4 = layers.Dense(<span class="hljs-number">10</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        <span class="hljs-comment"># 使用上面定义的层进行前向传播</span>        x1 = self.dense_1(inputs[<span class="hljs-number">0</span>])        x2 = self.dense_2(inputs[<span class="hljs-number">1</span>])        x = tf.concat((x1, x2), axis=<span class="hljs-number">-1</span>)        x = self.dense_3(x)        <span class="hljs-comment"># 输出</span>        pred = self.dense_4(x)        <span class="hljs-keyword">return</span> pred</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 配置模型</span>model = MyModel(num_classes=<span class="hljs-number">10</span>)model.compile(    optimizer=tf.keras.optimizers.RMSprop(<span class="hljs-number">0.001</span>),    loss=tf.keras.losses.CategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),    metrics=[<span class="hljs-string">'accuracy'</span>])<span class="hljs-comment"># 生成数据</span>data1 = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))data2 = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">32</span>))labels = np.random.random((<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<span class="hljs-comment"># 训练</span>model.fit((data1, data2), labels, epochs=<span class="hljs-number">10</span>, batch_size=<span class="hljs-number">10</span>)</code></pre></div><h1 id="4-练习"><a href="#4-练习" class="headerlink" title="4. 练习"></a>4. 练习</h1><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npiris = datasets.load_iris()data = iris.datalabels = iris.targetdata = np.concatenate((data,labels.reshape(<span class="hljs-number">150</span>,<span class="hljs-number">1</span>)),axis=<span class="hljs-number">-1</span>)np.random.shuffle(data)</code></pre></div><div class="hljs"><pre><code class="hljs Python">data.shape</code></pre></div><div class="hljs"><pre><code class="hljs Python">X = data[:,:<span class="hljs-number">4</span>]Y = data[:,<span class="hljs-number">-1</span>]print(X.shape, Y.shape)</code></pre></div><div class="hljs"><pre><code class="hljs Python">print(np.unique(Y))</code></pre></div><div class="hljs"><pre><code class="hljs Python">print(X[<span class="hljs-number">0</span>])</code></pre></div><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 自己完成的部分</span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<span class="hljs-keyword">import</span> tensorflow.keras.layers <span class="hljs-keyword">as</span> layers<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span><span class="hljs-params">(tf.keras.Model)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num_classes=<span class="hljs-number">3</span>)</span>:</span>        super(MyModel, self).__init__()        self.num_classes = num_classes        self.Dense1 = layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">'relu'</span>, input_shape=(<span class="hljs-number">4</span>,))        self.Dense2 = layers.Dense(<span class="hljs-number">3</span>, activation=<span class="hljs-string">'relu'</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span><span class="hljs-params">(self, inputs)</span>:</span>        x = self.Dense1(inputs)        x = self.Dense2(x)        <span class="hljs-keyword">return</span> xmodel = MyModel(num_classes=<span class="hljs-number">3</span>)</code></pre></div><div class="hljs"><pre><code class="hljs Python">model.compile(optimizer=tf.keras.optimizers.Adam(),              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),              metrics=[tf.keras.metrics.SparseCategoricalAccuracy()])<span class="hljs-comment">#keras</span>model.fit(X, Y, batch_size=<span class="hljs-number">30</span>, epochs=<span class="hljs-number">50</span>, shuffle=<span class="hljs-literal">True</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Change Font of CMD</title>
    <link href="/2020/Change-Font-of-CMD/"/>
    <url>/2020/Change-Font-of-CMD/</url>
    
    <content type="html"><![CDATA[<ol><li><p>安装字体，自己用的是Microsoft Yahei Mono，下载地址 <a href="https://pan.baidu.com/s/1hFn2oYs1lmbDmrZhjJ3QBA&amp;shfl=shareset" target="_blank" rel="noopener">https://pan.baidu.com/s/1hFn2oYs1lmbDmrZhjJ3QBA&amp;shfl=shareset</a> ，提取码: tfgr。</p></li><li><p>打开注册表：win+r输入regedit。</p></li><li><p>定位到计算机 \HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont ，将936的数值数据修改为*Microsoft Yahei Mono。</p></li><li><p>打开CMD，右键点击打开属性，设置字号等。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境设置</tag>
      
      <tag>系统设置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Difference Between &#39;+=&#39; and &#39;=+&#39;</title>
    <link href="/2020/Difference-Between-&#39;+=&#39;-and=&#39;=+&#39;/"/>
    <url>/2020/Difference-Between-&#39;+=&#39;-and=&#39;=+&#39;/</url>
    
    <content type="html"><![CDATA[<p>+=运算会在对象原地址之上进行修改，而=…+会新生成一个对象，似乎只继承了值，而没有保留其他属性。</p><p>起因：学习PyTorch时，在一个回归问题的训练过程中更新参数：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 初始化权重参数</span>w = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)b = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)<span class="hljs-comment"># 学习率</span>lr = <span class="hljs-number">0.001</span>loss = <span class="hljs-number">0</span><span class="hljs-comment"># 训练模型</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">500</span>):    <span class="hljs-comment"># 前向传播</span>    y_pred = torch.mm(torch.pow(x, <span class="hljs-number">2</span>), w) + b    <span class="hljs-comment"># 损失函数</span>    loss = torch.pow(y_pred - y, <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>    loss = loss.sum()    <span class="hljs-comment"># 计算梯度</span>    loss.backward()  <span class="hljs-comment"># 梯度存储在grad属性中</span>    <span class="hljs-comment"># 手动更新参数</span>    <span class="hljs-keyword">with</span> torch.no_grad():        w = w - lr * w.grad        b = b - lr * b.grad        <span class="hljs-comment"># 梯度清零</span>        w.grad.zero_()        b.grad.zero_()</code></pre></div><p>报了如下错误：</p><div class="hljs"><pre><code class="hljs Python">AttributeError: <span class="hljs-string">'NoneType'</span> object has no attribute <span class="hljs-string">'zero_'</span></code></pre></div><p>替换为如下后正确了：</p><div class="hljs"><pre><code class="hljs Python">w -= lr * w.gradb -= lr * b.grad</code></pre></div><p>进行测试：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 初始化权重参数</span>w = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)b = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)print(<span class="hljs-string">'更新前：\nw&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;;  b&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;'</span>.format(w, w.grad, id(w), b, b.grad, id(b)))lr = <span class="hljs-number">0.001</span>y_pred = torch.mm(torch.pow(x, <span class="hljs-number">2</span>), w) + bloss = torch.pow(y_pred - y, <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>loss = loss.sum()loss.backward()<span class="hljs-comment"># 不同方式更新参数</span><span class="hljs-keyword">with</span> torch.no_grad():    w = w - lr * w.grad    b -= lr * b.gradprint(<span class="hljs-string">'更新后：\nw&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;;  b&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;'</span>.format(w, w.grad, id(w), b, b.grad, id(b)))</code></pre></div><p>运行结果：</p><div class="hljs"><pre><code class="hljs Python">更新前：wtensor([[<span class="hljs-number">0.1969</span>]], requires_grad=<span class="hljs-literal">True</span>), 梯度<span class="hljs-literal">None</span>, 地址<span class="hljs-number">1166287893352</span>;  btensor([[<span class="hljs-number">-0.9487</span>]], requires_grad=<span class="hljs-literal">True</span>), 梯度<span class="hljs-literal">None</span>, 地址<span class="hljs-number">1166290443064</span>更新后：wtensor([[<span class="hljs-number">0.3587</span>]]), 梯度<span class="hljs-literal">None</span>, 地址<span class="hljs-number">1166290440344</span>;  btensor([[<span class="hljs-number">-0.5492</span>]], requires_grad=<span class="hljs-literal">True</span>), 梯度tensor([[<span class="hljs-number">-399.5237</span>]]), 地址<span class="hljs-number">1166290443064</span></code></pre></div><p>w的地址发生了改变且没有继承原来的梯度。</p>]]></content>
    
    
    <categories>
      
      <category>Pytorch学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pip tips</title>
    <link href="/2020/pip-tips/"/>
    <url>/2020/pip-tips/</url>
    
    <content type="html"><![CDATA[<h3 id="1-指定源"><a href="#1-指定源" class="headerlink" title="1. 指定源"></a>1. 指定源</h3><p>使用如下方法指定源：</p><div class="hljs"><pre><code class="hljs sql">pip <span class="hljs-keyword">install</span> &lt;<span class="hljs-keyword">package</span>&gt; -i &lt;<span class="hljs-keyword">source</span>&gt;</code></pre></div><p>最常用的国内源是 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a> 清华源。</p><h3 id="2-设置超时时间"><a href="#2-设置超时时间" class="headerlink" title="2. 设置超时时间"></a>2. 设置超时时间</h3><p>使用如下方法设置超时时间（单位为秒）：</p><div class="hljs"><pre><code class="hljs verilog">pip install --<span class="hljs-keyword">default</span>-<span class="hljs-keyword">time</span>=&lt;<span class="hljs-keyword">time</span>&gt; &lt;<span class="hljs-keyword">package</span>&gt;</code></pre></div><h3 id="3-本地安装方法"><a href="#3-本地安装方法" class="headerlink" title="3. 本地安装方法"></a>3. 本地安装方法</h3><p>首先在对应的环境中执行以下代码，可以查看这个环境的pip支持的安装包类型：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">pip</span><span class="hljs-selector-class">._internal</span><span class="hljs-selector-class">.pep425tags</span><span class="hljs-selector-tag">print</span>(<span class="hljs-selector-tag">pip</span><span class="hljs-selector-class">._internal</span><span class="hljs-selector-class">.pep425tags</span><span class="hljs-selector-class">.get_supported</span>())</code></pre></div><p>然后到 <a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a> 或其他源网站，搜索需要的包。</p><ul><li>在 Release history 中可以选择自己需要的版本。</li><li>在 Download files 中可以找到安装包，选择自己的pip支持的类型下载到本地。</li></ul><p>下载完成后，使用pip安装即可。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>pip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[TF2]1. Installation</title>
    <link href="/2020/1-TF2-Installation/"/>
    <url>/2020/1-TF2-Installation/</url>
    
    <content type="html"><![CDATA[<p>在 <a href="https://tensorflow.google.cn/install/gpu" target="_blank" rel="noopener">https://tensorflow.google.cn/install/gpu</a> 中查看各个依赖软件的版本要求。</p><h4 id="1-安装Nvidia驱动"><a href="#1-安装Nvidia驱动" class="headerlink" title="1. 安装Nvidia驱动"></a><strong>1. 安装Nvidia驱动</strong></h4><p>可以直接在GeForce Experience中更新驱动程序，或在 <a href="https://www.geforce.cn/drivers" target="_blank" rel="noopener">https://www.geforce.cn/drivers</a> 查找与自己显卡相符的驱动程序下载安装。</p><h4 id="2-安装CUDA"><a href="#2-安装CUDA" class="headerlink" title="2. 安装CUDA"></a><strong>2. 安装CUDA</strong></h4><p>进入<a href="https://developer.nvidia.com/cuda-toolkit" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit</a> ，选择下载，进入选择页面。</p><p>点击Legacy Releases，选择需要的CUDA版本。自己安装的是TensorFlow2.1.0，需要的CUDA版本为10.1。</p><p>进入系统选择页面，选择Windows-x86_64-10，安装方式建议exe(local)，方式因网络问题造成安装失败。</p><p>选择Base Installer中的Download，下载CUDA的本地安装包，安装。默认安装路径为C:\ProgramData\NVIDIA GPU Computing Toolkit。</p><p>安装完成后，在命令行运行<code>nvcc -V</code>查看CUDA版本以验证安装是否成功。</p><h4 id="3-安装CUDNN"><a href="#3-安装CUDNN" class="headerlink" title="3. 安装CUDNN"></a><strong>3. 安装CUDNN</strong></h4><p>进入<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download</a> ，登录并填写问卷，进入下载页面。选择与CUDA版本相符的CUDNN，这里选择cuDNN v7.6.5 (November 5th, 2019) for CUDA 10.1，<br>cuDNN Library for Windows 10下载。</p><p>下载完成后，解压压缩包，将三个文件夹中的文件分别移动至CUDA安装路径中的对应文件夹里。</p><h4 id="4-安装TensorFlow"><a href="#4-安装TensorFlow" class="headerlink" title="4. 安装TensorFlow"></a><strong>4. 安装TensorFlow</strong></h4><ul><li>网络环境好：</li></ul><p>直接使用<code>pip install tensorflow-gpu==2.1.0</code>即可安装所有依赖库。</p><ul><li><p>网络环境不好，直接使用pip容易失败：</p><p>在 <a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a> 直接搜索需要的库，在release history中选择合适版本，下载后进行本地安装<code>pip install [本地路径]</code>。</p><p>查看pip支持的安装包类型，可以在需要安装TensorFlow的Python环境中执行：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pip._internal.pep425tagsprint(pip._internal.pep425tags.get_supported())</code></pre></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test Blog</title>
    <link href="/2020/Test-Blog/"/>
    <url>/2020/Test-Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="标题测试"><a href="#标题测试" class="headerlink" title="标题测试"></a>标题测试</h1><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><ul><li>行内公式$ c = \sqrt{a^{2}+b_{xy}^{2}+e^{x}} $</li><li><p>公式块</p><script type="math/tex; mode=display">c = \sqrt{a^{2}+b_{xy}^{2} +e^{x}}</script><blockquote><p>引用</p></blockquote></li></ul><p><em>粗体</em>   <strong>斜体</strong></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="table-container"><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><div class="hljs"><pre><code class="hljs python3">import numpy as np</code></pre></div><h2 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h2><ul><li>图片<br><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" srcset="/img/loading.gif" alt="测试图片"></li><li>图片链接<br><a href="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" target="_blank" rel="noopener">测试图片</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/hello-world/"/>
    <url>/2020/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="hljs"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="hljs"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="hljs"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="hljs"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
