<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Change-Font-of-CMD</title>
    <link href="/2020/Change-Font-of-CMD/"/>
    <url>/2020/Change-Font-of-CMD/</url>
    
    <content type="html"><![CDATA[<div class="hljs"><pre><code>1. 安装字体，自己用的是Microsoft Yahei Mono，下载地址 https://pan.baidu.com/s/1hFn2oYs1lmbDmrZhjJ3QBA&amp;shfl=shareset ，提取码: tfgr。2. 打开注册表：win+r输入regedit。3. 定位到计算机 \HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont ，将936的数值数据修改为&quot;*Microsoft Yahei Mono&quot;。4. 打开CMD，右键点击打开属性，设置字号等。</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境设置</tag>
      
      <tag>系统设置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Difference Between &#39;+=&#39; and &#39;=+&#39;</title>
    <link href="/2020/Difference-Between-&#39;+=&#39;-and=&#39;=+&#39;/"/>
    <url>/2020/Difference-Between-&#39;+=&#39;-and=&#39;=+&#39;/</url>
    
    <content type="html"><![CDATA[<p>+=运算会在对象原地址之上进行修改，而=…+会新生成一个对象，似乎只继承了值，而没有保留其他属性。</p><p>起因：学习PyTorch时，在一个回归问题的训练过程中更新参数：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 初始化权重参数</span>w = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)b = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)<span class="hljs-comment"># 学习率</span>lr = <span class="hljs-number">0.001</span>loss = <span class="hljs-number">0</span><span class="hljs-comment"># 训练模型</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">500</span>):    <span class="hljs-comment"># 前向传播</span>    y_pred = torch.mm(torch.pow(x, <span class="hljs-number">2</span>), w) + b    <span class="hljs-comment"># 损失函数</span>    loss = torch.pow(y_pred - y, <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>    loss = loss.sum()    <span class="hljs-comment"># 计算梯度</span>    loss.backward()  <span class="hljs-comment"># 梯度存储在grad属性中</span>    <span class="hljs-comment"># 手动更新参数</span>    <span class="hljs-keyword">with</span> torch.no_grad():        w = w - lr * w.grad        b = b - lr * b.grad        <span class="hljs-comment"># 梯度清零</span>        w.grad.zero_()        b.grad.zero_()</code></pre></div><p>报了如下错误：</p><div class="hljs"><pre><code class="hljs Python">AttributeError: <span class="hljs-string">'NoneType'</span> object has no attribute <span class="hljs-string">'zero_'</span></code></pre></div><p>替换为如下后正确了：</p><div class="hljs"><pre><code class="hljs Python">w -= lr * w.gradb -= lr * b.grad</code></pre></div><p>进行测试：</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-comment"># 初始化权重参数</span>w = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)b = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, dtype=torch.float, requires_grad=<span class="hljs-literal">True</span>)print(<span class="hljs-string">'更新前：\nw&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;;  b&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;'</span>.format(w, w.grad, id(w), b, b.grad, id(b)))lr = <span class="hljs-number">0.001</span>y_pred = torch.mm(torch.pow(x, <span class="hljs-number">2</span>), w) + bloss = torch.pow(y_pred - y, <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>loss = loss.sum()loss.backward()<span class="hljs-comment"># 不同方式更新参数</span><span class="hljs-keyword">with</span> torch.no_grad():    w = w - lr * w.grad    b -= lr * b.gradprint(<span class="hljs-string">'更新后：\nw&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;;  b&#123;&#125;, 梯度&#123;&#125;, 地址&#123;&#125;'</span>.format(w, w.grad, id(w), b, b.grad, id(b)))</code></pre></div><p>运行结果：</p><div class="hljs"><pre><code class="hljs Python">更新前：wtensor([[<span class="hljs-number">0.1969</span>]], requires_grad=<span class="hljs-literal">True</span>), 梯度<span class="hljs-literal">None</span>, 地址<span class="hljs-number">1166287893352</span>;  btensor([[<span class="hljs-number">-0.9487</span>]], requires_grad=<span class="hljs-literal">True</span>), 梯度<span class="hljs-literal">None</span>, 地址<span class="hljs-number">1166290443064</span>更新后：wtensor([[<span class="hljs-number">0.3587</span>]]), 梯度<span class="hljs-literal">None</span>, 地址<span class="hljs-number">1166290440344</span>;  btensor([[<span class="hljs-number">-0.5492</span>]], requires_grad=<span class="hljs-literal">True</span>), 梯度tensor([[<span class="hljs-number">-399.5237</span>]]), 地址<span class="hljs-number">1166290443064</span></code></pre></div><p>w的地址发生了改变且没有继承原来的梯度。</p>]]></content>
    
    
    <categories>
      
      <category>Pytorch学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pip tips</title>
    <link href="/2020/pip-tips/"/>
    <url>/2020/pip-tips/</url>
    
    <content type="html"><![CDATA[<h3 id="1-指定源"><a href="#1-指定源" class="headerlink" title="1. 指定源"></a>1. 指定源</h3><p>使用如下方法指定源：</p><div class="hljs"><pre><code class="hljs sql">pip <span class="hljs-keyword">install</span> &lt;<span class="hljs-keyword">package</span>&gt; -i &lt;<span class="hljs-keyword">source</span>&gt;</code></pre></div><p>最常用的国内源是 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a> 清华源。</p><h3 id="2-设置超时时间"><a href="#2-设置超时时间" class="headerlink" title="2. 设置超时时间"></a>2. 设置超时时间</h3><p>使用如下方法设置超时时间（单位为秒）：</p><div class="hljs"><pre><code class="hljs verilog">pip install --<span class="hljs-keyword">default</span>-<span class="hljs-keyword">time</span>=&lt;<span class="hljs-keyword">time</span>&gt; &lt;<span class="hljs-keyword">package</span>&gt;</code></pre></div><h3 id="3-本地安装方法"><a href="#3-本地安装方法" class="headerlink" title="3. 本地安装方法"></a>3. 本地安装方法</h3><p>首先在对应的环境中执行以下代码，可以查看这个环境的pip支持的安装包类型：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">pip</span><span class="hljs-selector-class">._internal</span><span class="hljs-selector-class">.pep425tags</span><span class="hljs-selector-tag">print</span>(<span class="hljs-selector-tag">pip</span><span class="hljs-selector-class">._internal</span><span class="hljs-selector-class">.pep425tags</span><span class="hljs-selector-class">.get_supported</span>())</code></pre></div><p>然后到 <a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a> 或其他源网站，搜索需要的包。</p><ul><li>在 Release history 中可以选择自己需要的版本。</li><li>在 Download files 中可以找到安装包，选择自己的pip支持的类型下载到本地。</li></ul><p>下载完成后，使用pip安装即可。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>pip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. TF2-Installation</title>
    <link href="/2020/1-TF2-Installation/"/>
    <url>/2020/1-TF2-Installation/</url>
    
    <content type="html"><![CDATA[<p>在 <a href="https://tensorflow.google.cn/install/gpu" target="_blank" rel="noopener">https://tensorflow.google.cn/install/gpu</a> 中查看各个依赖软件的版本要求。</p><h4 id="1-安装Nvidia驱动"><a href="#1-安装Nvidia驱动" class="headerlink" title="1. 安装Nvidia驱动"></a><strong>1. 安装Nvidia驱动</strong></h4><p>可以直接在GeForce Experience中更新驱动程序，或在 <a href="https://www.geforce.cn/drivers" target="_blank" rel="noopener">https://www.geforce.cn/drivers</a> 查找与自己显卡相符的驱动程序下载安装。</p><h4 id="2-安装CUDA"><a href="#2-安装CUDA" class="headerlink" title="2. 安装CUDA"></a><strong>2. 安装CUDA</strong></h4><p>进入<a href="https://developer.nvidia.com/cuda-toolkit" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit</a> ，选择下载，进入选择页面。</p><p>点击Legacy Releases，选择需要的CUDA版本。自己安装的是TensorFlow2.1.0，需要的CUDA版本为10.1。</p><p>进入系统选择页面，选择Windows-x86_64-10，安装方式建议exe(local)，方式因网络问题造成安装失败。</p><p>选择Base Installer中的Download，下载CUDA的本地安装包，安装。默认安装路径为C:\ProgramData\NVIDIA GPU Computing Toolkit。</p><p>安装完成后，在命令行运行<code>nvcc -V</code>查看CUDA版本以验证安装是否成功。</p><h4 id="3-安装CUDNN"><a href="#3-安装CUDNN" class="headerlink" title="3. 安装CUDNN"></a><strong>3. 安装CUDNN</strong></h4><p>进入<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download</a> ，登录并填写问卷，进入下载页面。选择与CUDA版本相符的CUDNN，这里选择cuDNN v7.6.5 (November 5th, 2019) for CUDA 10.1，<br>cuDNN Library for Windows 10下载。</p><p>下载完成后，解压压缩包，将三个文件夹中的文件分别移动至CUDA安装路径中的对应文件夹里。</p><h4 id="4-安装TensorFlow"><a href="#4-安装TensorFlow" class="headerlink" title="4. 安装TensorFlow"></a><strong>4. 安装TensorFlow</strong></h4><ul><li>网络环境好：</li></ul><p>直接使用<code>pip install tensorflow-gpu==2.1.0</code>即可安装所有依赖库。</p><ul><li><p>网络环境不好，直接使用pip容易失败：</p><p>在 <a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a> 直接搜索需要的库，在release history中选择合适版本，下载后进行本地安装<code>pip install [本地路径]</code>。</p><p>查看pip支持的安装包类型，可以在需要安装TensorFlow的python环境中执行：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pip._internal.pep425tagsprint(pip._internal.pep425tags.get_supported())</code></pre></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>TensorFlow2学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>TensorFlow</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test Blog</title>
    <link href="/2020/Test-Blog/"/>
    <url>/2020/Test-Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="标题测试"><a href="#标题测试" class="headerlink" title="标题测试"></a>标题测试</h1><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><ul><li>行内公式$ c = \sqrt{a^{2}+b_{xy}^{2}+e^{x}} $</li><li><p>公式块</p><script type="math/tex; mode=display">c = \sqrt{a^{2}+b_{xy}^{2} +e^{x}}</script><blockquote><p>引用</p></blockquote></li></ul><p><em>粗体</em>   <strong>斜体</strong></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="table-container"><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><div class="hljs"><pre><code class="hljs python3">import numpy as np</code></pre></div><h2 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h2><ul><li>图片<br><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" srcset="/img/loading.gif" alt="测试图片"></li><li>图片链接<br><a href="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" target="_blank" rel="noopener">测试图片</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/hello-world/"/>
    <url>/2020/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="hljs"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="hljs"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="hljs"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="hljs"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
